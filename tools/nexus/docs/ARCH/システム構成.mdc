# システム構成

> Breadcrumbs
> Layer: ARCH
> Upstream: docs/ARCH/index.mdc
> Downstream: docs/ARCH/セキュリティ設計.mdc, docs/ARCH/IPC設計.mdc

## 目次

- [システム構成](#システム構成)
  - [目次](#目次)
  - [1. システム概要](#1-システム概要)
    - [1.1 通信フロー](#11-通信フロー)
  - [2. プロセス構成](#2-プロセス構成)
    - [2.1 Main Process (main.ts)](#21-main-process-maints)
    - [2.2 Renderer Process (src/renderer/)](#22-renderer-process-srcrenderer)
    - [2.3 Preload (preload.js)](#23-preload-preloadjs)
  - [3. ディレクトリ構造](#3-ディレクトリ構造)
    - [3.1 推奨構造](#31-推奨構造)
    - [3.2 ディレクトリ説明](#32-ディレクトリ説明)
    - [3.3 ビルドツール](#33-ビルドツール)

---

## 1. システム概要

NexusはElectronアプリケーションとして、3つのプロセスで構成されます：

1. **Main Process (Node.js)**: ファイルI/O、セキュリティ検証、ウィンドウ管理
2. **Renderer Process (Chromium)**: UI表示、ユーザー操作、ロジック実行
3. **Preload**: Main/Renderer間の安全な通信橋渡し

### 1.1 通信フロー

- Renderer → Preload: `window.docs.read()`, `window.tasks.readJson()`
- Preload → Main: IPC経由でファイル操作
- Main → File System: セキュリティ検証後にファイルI/O

## 2. プロセス構成

### 2.1 Main Process (main.ts)

役割: アプリケーションのエントリーポイント

主要責務:
- ウィンドウ管理（BrowserWindow）
- IPCハンドラー（docs:read, tasks:*, env:isDebug）
- セキュリティ検証（リポジトリ外パス検出）
- DevTools制御（debug mode）
- E2Eテスト支援（auto-click）

技術:
- TypeScript
- Electron IPC（`ipcMain.handle()`）
- Node.js File System（`fs`モジュール）

セキュリティ:
- パス検証: リポジトリルート外へのアクセス拒否
- エラーハンドリング: 全てのIPCコールでエラー処理

実装方針:
- IPCハンドラーは`handlers/`ディレクトリに分割
- 型定義ファイルで型安全性を確保
- エラーレスポンスは統一フォーマット

ファイル:
- main.ts: エントリーポイント
- handlers/: IPCハンドラー（docs.ts, tasks.ts）
- utils/: ユーティリティ（security.ts, file.ts）
- dist/main/main.js: ビルド後JavaScript

### 2.2 Renderer Process (src/renderer/)

役割: UI表示・ユーザーインタラクション

主要責務:
- Docs Navigator UI
- Tree表示
- Tasks管理 UI
- Quality Gates検証

技術:
- HTML/CSS/JavaScript (ES6+)
- DOM操作（Vanilla JS）
- Event Driven

セキュリティ:
- CSP（Content Security Policy）設定
- 信頼できるソースからのみコンテンツ読み込み

実装方針:
- 機能別にモジュール分割（features/）
- 共通コードはshared/に配置
- 型定義ファイルでAPIの型安全性を確保

ファイル:
- index.html: UI構造
- styles/: スタイルファイル（app.css, theme.css）
- features/: 機能別モジュール
  - docs-navigator/: Docs Navigator
  - tasks/: Tasks管理
- shared/: 共通コード（app.js, utils.js）

### 2.3 Preload (preload.js)

役割: Main/Renderer間の橋渡し

主要責務:
- contextBridgeによる安全なAPI公開
- window.docs, window.tasks, window.envの提供
- IPC Proxy経由での通信仲介

技術:
- contextBridge API (`contextBridge.exposeInMainWorld`)
- IPC Proxy
- 型定義の明示（TypeScript）

安全性:
- contextIsolation: true（RendererとMainを分離）
- nodeIntegration: false（Rendererからの直接Nodeアクセス禁止）

API設計:
- 命名規則: `window.[namespace].[method]`
- 型定義: TypeScriptインターフェース定義
- エラーハンドリング: 統一エラーレスポンス

実装方針:
- contextBridge.exposeInMainWorld()でAPI公開
- 関数単位で公開（オブジェクト単位ではない）
- 全てのAPIに型定義を付与

## 3. ディレクトリ構造

### 3.1 推奨構造

NexusはElectron + TypeScriptの標準的な構造を採用します。

```
tools/nexus/
├── src/                      # ソースコード
│   ├── main/                 # Main Process
│   ├── preload/              # Preload script
│   └── renderer/             # Renderer Process (HTML/JS/CSS)
├── dist/                     # TypeScriptビルド成果物
├── docs/                     # 仕様・設計ドキュメント
├── test/                     # テストコード
│   ├── e2e/                  # Playwright E2Eテスト
│   │   ├── fixtures/
│   │   └── smoke.spec.ts
│   └── unit/                 # ユニットテスト（将来拡張用）
├── legacy/                   # 旧構成（main.js, renderer/ 等）
│   └── tests/                # レガシーE2Eスクリプト
├── scripts/                  # CLIスクリプト群
│   └── validate-docs-gates.js
├── e2e-proof/                # 自動化実装の検証資産
├── context.mdc               # Nexus context map
├── package.json              # プロジェクト設定
├── tsconfig.json             # TypeScript設定
├── jest.config.js            # Jest設定
└── playwright.config.ts      # Playwright設定
```

### 3.2 ディレクトリ説明

- **src/main/**: Main Processのソースコード
  - handlers/: IPCハンドラーを機能別に分割
  - utils/: ユーティリティ関数
- **src/preload/**: Preload script（Bridge API）
- **src/renderer/**: Renderer ProcessのUIコード
  - features/: 機能別モジュール（Docs Navigator, Tasks）
  - shared/: 共通コード
- **dist/**: ビルド成果物（gitignore対象）
- **docs/**: ドキュメント（ARCH/PRD/DEVELOPMENT等）
- **test/**: テストコード
  - e2e/: Playwright E2Eテスト（smoke.spec.ts）
  - unit/: ユニットテストの配置場所（`.gitkeep`のみ）
- **legacy/**: 旧Electron構成（`main.js`や`renderer/`など）。参照のみで更新禁止
- **scripts/**: CLIユーティリティ（Quality Gates検証など）
- **e2e-proof/**: 完全自動化E2Eテストの検証成果

### 3.3 ビルドツール

**Webpack**（予定）:
- Main Process: TypeScript → JavaScript
- Renderer Process: HTML/CSS/JSをバンドル
- 設定ファイル: `webpack.config.ts`

**TypeScript**:
- 設定ファイル: `tsconfig.json`
- 型チェック: ビルド時に実行
- 出力先: `dist/`

**Electron Builder**（将来的）:
- パッケージング: 実行可能ファイル生成
- インストーラー作成: Windows/macOS/Linux対応

---

関連文書:
- ARCH/index.mdc: アーキテクチャ設計書一覧
- ARCH/セキュリティ設計.mdc: セキュリティ設計
- ARCH/データフロー設計.mdc: データフロー設計
