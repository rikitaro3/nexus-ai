---
title: "プロンプト辞書ドラフト"
layer: "PRD"
template: "legacy-import"
upstream:
  - "docs/PRD/システム要件定義書.mdc"
downstream: []
tags: []
---

# プロンプト辞書ドラフト

> Breadcrumbs
> Layer: PRD
> Upstream: docs/PRD/システム要件定義書.mdc
> Downstream: N/A

## 0. はじめに

このドキュメントは、Nexusで使用するプロンプトパーツの辞書ドラフトです。  
AI（Cursor等）への指示を標準化し、再利用可能なフレーズを管理します。

### 対象種別

プロンプト生成補助機能（FEAT-0015）は、以下の3つの対象種別に対応します：

1. **タスクベース**: タスク情報（タイトル、カテゴリ、優先度、FEAT-ID、関連ドキュメント）からタスク分解プロンプトを生成
2. **ドキュメントベース**: 単一または複数のドキュメントを対象にした編集・整備プロンプトを生成
3. **バリデーション違反ベース**: Quality Gates違反（DOC-01〜DOC-08, TC-01〜TC-04）に対する修正プロンプトを生成

詳細は `docs/PRD/プロンプト生成機能PRD.mdc` を参照してください。

## 1. プロンプトパーツ一覧

### 1.1 タスク分解系

#### TASK-BD-01: MECE分解の指示

```
要求をMECE（重複なく漏れなく）に分解してください。
```

#### TASK-BD-02: 完了基準の定義要求

```
完了基準を定義してください。
```

#### TASK-BD-03: サブタスク生成

```
以下の要求をサブタスクに分解してください：
[TASK]

出力形式：
- サブタスク1: [内容], 完了基準: [基準]
- サブタスク2: [内容], 完了基準: [基準]
```

### 1.2 ドキュメント整備系

#### DOC-RD-01: 章番号整備の指示

```
このドキュメントに章番号を追加してください。
ルール：## 1. タイトル のように番号を付与
```

#### DOC-RD-02: 目次追加の指示

```
リンク付きの目次を追加してください。
形式：[テキスト](#アンカー)
```

#### DOC-RD-03: 命名規則準拠の指示

```
ファイル名を命名規則に準拠させてください。
```

### 1.3 コード品質系

#### CODE-QC-01: コードレビュー依頼

```
以下のコードをレビューしてください。指摘事項を列挙してください。
```

#### CODE-QC-02: 型安全性チェック

```
TypeScriptの型エラーを確認し、修正してください。
```

### 1.4 E2Eテスト系

#### TEST-E2E-01: 自動テスト実行の依頼

```
E2Eテストを実行し、結果を報告してください。
```

#### TEST-E2E-02: 失敗時の調査依頼

```
E2Eテストが失敗しました。原因を調査してください。
```

### 1.5 ドキュメント整備系

#### DOC-CK-01: 一般的なシステム要件定義書との比較

```
一般的なシステム要件定義書と比較して、抜けている項目などはないですか？
```

#### DOC-CK-02: 段階的実装計画の確認

```
段階的実装計画に現在の作業が含まれているか確認してください。
```

### 1.6 ベストプラクティス調査系

#### BEST-RS-01: 技術選定のベストプラクティス調査

```
[TECHNOLOGY]のベストプラクティスを調査してください。
対象: [目的]
出力: 推奨事項、重要な考慮点、参考リンク
```

#### BEST-RS-02: ディレクトリ構造のベストプラクティス調査

```
[TECHNOLOGY]のディレクトリ構造のベストプラクティスを調査してください。
対象: [用途]
出力: 推奨ディレクトリ構造、説明、理由
```

#### BEST-RS-03: 一般的な実装パターンの確認

```
一般的な[PURPOSE]の実装ではどのようなパターンが使われますか？
確認してください。
```

#### BEST-RS-04: 既存コードとの整合性確認

```
既存の実装と新しい要件の整合性を確認してください。
不整合があれば指摘してください。
```

#### BEST-RS-05: 技術調査の実装検証

```
以下の技術調査を実施してください：
- 調査対象: [TECHNOLOGY/FEATURE]
- 検証方法: 最小アプリケーションの実装
- 出力: 実装可能かの判断、課題、推奨事項

実行例:
1. 最小アプリケーションを作成
2. 実装検証を実行
3. 結果を分析して報告
```

#### BEST-RS-06: E2Eテスト基盤の実装検証

```
E2Eテスト基盤の実装可能性を検証してください：
- 対象: Electron + Playwright + CDP
- 検証内容: Electron起動、CDP接続、UI操作、ログキャプチャ
- 最小アプリ: e2e-proof/ 参照
- 出力: 実装可能かの判断、課題、推奨事項

検証項目:
1. Electron起動
2. CDP接続（ポート9222）
3. UI操作（ボタンクリック等）
4. ログキャプチャ
5. TEST_RESULT検証

結論: 実装可能だが、CDP接続の安定性に課題あり
```

### 1.4 バリデーション違反修正系

#### DOC-FIX-01: Breadcrumbsブロック追加

```
このドキュメントにBreadcrumbsブロックを追加してください。

[正しい記述例]
> Breadcrumbs
> Layer: PRD
> Upstream: docs/PRD/index.mdc
> Downstream: docs/ARCH/index.mdc

[注意事項]
- Layerは以下のいずれか: STRATEGY, PRD, UX, API, DATA, ARCH, DEVELOPMENT, QA
- Upstream/Downstreamは実在するファイルパスまたはN/A
- パスはプロジェクトルートからの相対パス
```

#### DOC-FIX-02: Layer定義修正

```
このドキュメントのLayer定義を正しい値に修正してください。

[有効なLayer]
- STRATEGY: 戦略・ビジョン
- PRD: プロダクト要求定義
- UX: ユーザー体験・画面仕様
- API: APIインターフェース仕様
- DATA: データ構造・スキーマ
- ARCH: アーキテクチャ設計
- DEVELOPMENT: 開発ガイド
- QA: 品質保証・テスト

現在のLayer: {current_layer}
推奨Layer: {suggested_layer}
```

#### DOC-FIX-03: リンクパス修正

```
Upstream/Downstreamに記載されているパスが実在しません。
以下のパスを確認し、正しいパスに修正してください。

[不正なパス]
{invalid_paths}

[修正方法]
1. ファイルが存在するか確認
2. パスがプロジェクトルートからの相対パスか確認
3. 存在しない場合は「N/A」に変更
```

#### DOC-FIX-04: 循環参照解消

```
ドキュメント間に循環参照が検出されました。
以下の依存関係を見直し、循環を解消してください。

[循環参照パス]
{circular_path}

[解消方法]
- 上位・下位の関係を明確化
- 不要なリンクを削除
- 必要に応じてドキュメント構造を再設計
```

#### DOC-FIX-05: 章番号追加・修正

```
このドキュメントの見出しに章番号を追加してください。

[ルール]
- ## 1. タイトル のように番号を付与
- 番号は連続する（1, 2, 3...）
- サブセクションは 1.1, 1.2 のように階層化

[現在の見出し]
{current_headings}
```

#### DOC-FIX-06: 目次生成

```
リンク付きの目次を追加してください。

[形式]
- [セクション名](#アンカー)
- アンカーは見出しを小文字化し、スペースをハイフンに変換

[目次の位置]
Breadcrumbsの直後、最初のセクションの前
```

#### DOC-FIX-07: 命名規則修正

```
ファイル名を命名規則に準拠させてください。

[命名規則]
- PRD層: PRD_機能名.mdc
- その他: 機能名.mdc または 目的.mdc
- 英数字、アンダースコア、ハイフンのみ使用
- スペースは使わない

現在のファイル名: {current_filename}
推奨ファイル名: {suggested_filename}
```

#### DOC-FIX-08: 内容範囲の明示追加

```
このドキュメントに「扱う内容」と「扱わない内容」のセクションを追加してください。

[記述例]
## スコープ

### 扱う内容
- 項目1
- 項目2

### 扱わない内容（非スコープ）
- 項目1
- 項目2

[注意]
- 箇条書き形式で明確に記述
- 曖昧な表現を避ける
```

---

## 2. 使用方法

1. プロンプトパーツから適切なものを選択
2. TASK、アンカー等の変数を置換
3. Cursor等のAIに送信

## 3. 今後の展開

- prompts.jsonへの登録
- カテゴリ別の整理
- 使用例の追加
- バージョン管理
