---
title: "PRD: Nexus - 要求定義書"
layer: "PRD"
template: "legacy-import"
upstream:
  - "docs/PRD/index.mdc"
downstream:
  - "docs/ARCH/index.mdc"
  - "docs/DEVELOPMENT/index.mdc"
  - "docs/QA/index.mdc"
tags: []
---

# PRD: Nexus - 要求定義書

> Breadcrumbs
> Layer: PRD
> Upstream: docs/PRD/index.mdc
> Downstream: docs/ARCH/index.mdc, docs/DEVELOPMENT/index.mdc, docs/QA/index.mdc

## 文書情報

- 文書種別: PRD (Product Requirements Document)
- 作成日: 2025-10-26
- 最終更新: 2025-10-26
- ステータス: 承認済み
- 対象範囲: Nexus（ドキュメントトレーサビリティとタスク生成・分解プラットフォーム）
- 関連文書: ARCH/index.mdc, DEVELOPMENT/index.mdc, QA/index.mdc

## Features Registry

| FEAT-ID | 機能名 | 説明 | 優先度 | ステータス |
|---------|--------|------|--------|-----------|
| FEAT-0001 | Docs Navigator | ドキュメント閲覧・ナビゲーション | High | 実装中 |
| FEAT-0002 | Tasks | タスク管理・分解支援 | High | 実装中 |
| FEAT-0003 | Quality Gates | 品質検証 | High | 計画中 |
| FEAT-0004 | Context切替 | デバッグモード | Medium | 計画中 |
| FEAT-0005 | AIモデル拡張対応 | 将来拡張 | Low | 未定 |
| FEAT-0006 | ドキュメントベースBI基盤 | 将来拡張 | Low | 未定 |
| FEAT-0007 | ルール変更の自動反映 | Quality Gates自動更新 | Medium | 計画中 |
| FEAT-0008 | 次のアクション自動提案 | AI支援ワークフロー | Medium | 計画中 |
| FEAT-0009 | 詳細カード共通コンポーネント | Docs/Tree共通の詳細表示 | High | 実装済み |
| FEAT-0010 | ドキュメントツリー表示 | 依存関係のツリー表示 | High | 実装済み |
| FEAT-0011 | オーファン検出 | 孤立ドキュメント検出 | Medium | 実装済み |
| FEAT-0012 | ドキュメント詳細表示 | メタデータと関連リンク表示 | High | 実装済み |
| FEAT-0013 | ツリーノード操作 | 展開/折りたたみと選択 | High | 実装済み |
| FEAT-0021 | ドキュメントビューア | アプリ内モーダル表示 | High | 未実装 |
| FEAT-0022 | ドキュメント編集機能 | 編集・保存 | High | 未実装 |
| FEAT-0023 | 修正プロンプト生成 | AI支援プロンプト生成 | High | 未実装 |
| FEAT-0014 | FEAT横断検索 | FEAT番号による横断検索・統合表示 | Medium | 計画中 |
| FEAT-0015 | プロンプト生成補助機能 | タスク・ドキュメント・バリデーション違反ベースのプロンプト生成 | High | 実装中 |

## 目次

- [PRD: Nexus - 要求定義書](#prd-nexus---要求定義書)
  - [文書情報](#文書情報)
  - [目次](#目次)
  - [0. 概要](#0-概要)
    - [0.1 プロダクトポジショニング](#01-プロダクトポジショニング)
    - [0.2 バリュープロポジション](#02-バリュープロポジション)
    - [0.3 主要成果物](#03-主要成果物)
  - [1. コアコンセプト](#1-コアコンセプト)
    - [1.1 ドキュメント駆動開発](#11-ドキュメント駆動開発)
    - [1.2 AIへの指示の定型化・効率化](#12-aiへの指示の定型化効率化)
    - [1.3 AIクオリティゲートウェイ・バリデーション](#13-aiクオリティゲートウェイバリデーション)
  - [2. 用語集](#2-用語集)
    - [2.1 主要概念](#21-主要概念)
    - [2.2 技術用語](#22-技術用語)
  - [3. ビジネス要求](#3-ビジネス要求)
    - [3.1 背景](#31-背景)
    - [3.2 解決方針](#32-解決方針)
    - [3.3 成功指標](#33-成功指標)
  - [4. システム要求](#4-システム要求)
    - [2.1 機能要件](#21-機能要件)
      - [FR-01: Docs Navigator（ドキュメント閲覧・ナビゲーション）](#fr-01-docs-navigatorドキュメント閲覧ナビゲーション)
      - [FR-02: Tasks（タスク管理・分解支援）](#fr-02-tasksタスク管理分解支援)
      - [FR-03: Quality Gates（品質検証）](#fr-03-quality-gates品質検証)
      - [FR-04: Context切替（デバッグモード）](#fr-04-context切替デバッグモード)
      - [FR-05: AIモデル拡張対応（将来）](#fr-05-aiモデル拡張対応将来)
      - [FR-06: ドキュメントベースBI基盤（将来）](#fr-06-ドキュメントベースbi基盤将来)
      - [FR-07: ルール変更の自動反映](#fr-07-ルール変更の自動反映)
      - [FR-08: 次のアクション自動提案](#fr-08-次のアクション自動提案)
      - [FR-15: プロンプト生成補助機能](#fr-15-プロンプト生成補助機能)
    - [2.2 非機能要件](#22-非機能要件)
      - [NFR-01: ローカル運用](#nfr-01-ローカル運用)
      - [NFR-02: 軽量性](#nfr-02-軽量性)
      - [NFR-03: 拡張性](#nfr-03-拡張性)
  - [5. AI支援フロー](#5-ai支援フロー)
    - [3.1 要求→タスク分解フロー](#31-要求タスク分解フロー)
    - [3.2 Cursor利用の制約](#32-cursor利用の制約)
  - [6. データモデル](#6-データモデル)
    - [4.1 ドキュメントメタデータ](#41-ドキュメントメタデータ)
    - [4.2 Tasks（tasks.json）](#42-taskstasksjson)
    - [4.3 DAG構造](#43-dag構造)
  - [7. 段階的実装計画](#7-段階的実装計画)
    - [Phase 1: Foundation（最優先）](#phase-1-foundation最優先)
    - [Phase 2: Automation](#phase-2-automation)
    - [Phase 3: Quality Gate高度化](#phase-3-quality-gate高度化)
    - [Phase 4: リポジトリ連携 + BI基盤](#phase-4-リポジトリ連携--bi基盤)
  - [8. 非スコープ](#8-非スコープ)
  - [9. 成果物](#9-成果物)
    - [7.1 プロダクト](#71-プロダクト)
    - [7.2 ドキュメント](#72-ドキュメント)
  - [10. 完了基準](#10-完了基準)
    - [Phase 1完了条件](#phase-1完了条件)
    - [Phase 2完了条件](#phase-2完了条件)
    - [Phase 3完了条件](#phase-3完了条件)

## 0. 概要

### 0.1 プロダクトポジショニング

Nexusは、ドキュメント駆動開発を実現する「ドキュメントトレーサビリティとタスク生成・分解プラットフォーム」です。

### 0.2 バリュープロポジション

- 課題解決: AIコンテキスト削減のためドキュメントを小分けにできるが、管理が複雑化するジレンマを解消
- 提供価値: 小分けされたドキュメントの自動管理（Breadcrumbs + DAG）により、必要なものだけを取捨選択可能
- 競合優位: ドキュメント駆動 + AI効率化 + Quality Gateの3つの柱で完全なトレーサビリティを実現

### 0.3 主要成果物

- ドキュメント階層可視化UI: 戦略から実装まで辿れるツリー表示
- AI指示テンプレート: 定型化されたプロンプトでCursor利用を効率化
- タスク分解支援: 要求→タスク分解の半自動化
- AIクオリティゲートウェイ: 出力品質の自動検証（DOC-01〜04）

## 1. コアコンセプト

Nexusは以下の3つの柱で構成されます：

### 1.1 ドキュメント駆動開発

- すべての意思決定と実装をドキュメントで記録
- ドキュメント階層がそのまま依存関係を表現
- DAGによる双方向トレーサビリティ
- 「なぜこの作業をするのか」が常に辿れる

背景:
AIのコンテキスト削減と出力品質向上のため、ドキュメントは小分けにすべきですが、
それにより管理・関連付け・保守が複雑化する課題があります。
Nexusは、Breadcrumbsによる自動リンク管理とDAGでのトレーサビリティ維持により、
小分けされたドキュメントを自動的に管理し、必要なものだけを取捨選択できるようにします。

### 1.2 AIへの指示の定型化・効率化

- Cursorへの入力テンプレートを標準化
- 要求→タスク分解プロンプトの自動生成
- 手動運用でコスト抑制、定額AI活用
- 再現性の高いAI利用フロー

### 1.3 AIクオリティゲートウェイ・バリデーション

- AI出力の品質を自動検証
- ドキュメント構造（DOC-01〜04）の自動チェック
- 承認済みアウトプットのみを正式登録
- 品質を担保した上での資産化

## 2. 用語集

### 2.1 主要概念

- DAG: Directed Acyclic Graph（有向非巡回グラフ）- ドキュメント間の依存関係を表現
- Breadcrumbs: ドキュメント内のリンク管理ブロック、Upstream/Downstreamを定義
- FEAT-ID: Feature ID（例: FEAT-0001）- 機能横断の識別子
- Quality Gate: 品質検証ゲートウェイ、AI出力やドキュメント構造を自動チェック
- Orphan: 孤立ドキュメント、上位・下位リンクのないドキュメント
- MECE: Mutually Exclusive, Collectively Exhaustive（重複なく漏れなく）

### 2.2 技術用語

- Electron: デスクトップアプリケーションフレームワーク
- Cursor: AI統合IDE、定額プランで利用
- Playwright: E2Eテストフレームワーク
- CDP: Chrome DevTools Protocol、E2EテストでのWeb操作に利用

---

## 3. ビジネス要求

### 3.1 背景

現在のソフトウェア開発では以下の課題がある：

- 戦略と実装の断絶: なぜその作業をするのか、どの戦略に紐づくのかが見えない
- トレーサビリティの欠如: 経営戦略レベルからリリース手順レベルの繋がりが把握できない
- ドキュメントの孤立: 単純なディレクトリ構造では、因果・依存関係が埋もれてしまう
- 要求→実装の分解工数: 口頭の要求を具体的なタスクに分解する手間が大きい
- コンテキスト管理のジレンマ: AIのコンテキスト削減・質向上のためドキュメントを小分けにしたいが、管理・関連付け・保守が複雑化する

### 3.2 解決方針

1. DAGベースのトレーサビリティ: 上位→下位の依存関係を厳密に管理
2. 可視化UI: ドキュメント間の関係をツリー表示で把握
3. AI支援分解: Cursorによる要求→タスク分解の半自動化
4. Quality Gates: AI出力の品質検証を自動化
5. 小分けドキュメントの自動管理: Breadcrumbsによるリンク自動化、DAGによる関連性維持、必要なドキュメントのみの取捨選択が可能

### 3.3 成功指標

- 任意のドキュメントから上位要求まで遡れる
- 任意の要求から下位実装まで降りられる
- 要求→タスク分解の工数が50%以上削減
- Quality Gates通過率が80%以上

## 4. システム要求

### 2.1 機能要件

#### FEAT-0001 (FR-01): Docs Navigator（ドキュメント閲覧・ナビゲーション）

目的: ドキュメント階層を可視化し、双方向のトレーサビリティを実現

要件:

1. 
   - ドキュメントをツリー構造で表示（DAG）
   - 展開/折りたたみ機能
   - 方向切替（Upstream/Downstream）

2. 
   - ノードクリックで本文表示
   - 上位/下位リンクの表示
   - 関連ドキュメント（PRD/UX/API/DATA/QA）への1-clickジャンプ

3. 
   - Features Registryの表示
   - FEAT-IDによる関連文書の検索・表示
   - 欠損リンクの警告表示

4. 
   - 孤立ドキュメント（上位・下位リンクなし）の検出
   - リスト表示

: 最優先（Phase 1）

#### FEAT-0002 (FR-02): Tasks（タスク管理・分解支援）

目的: TODO管理とAI支援によるタスク分解を統合

要件:

1. タスク管理
   - タスク登録（タイトル、カテゴリ、優先度、ステータス）
   - FEAT-ID紐付け
   - 編集・保存（tasks.json）
   - エクスポート（human_todo.mdc）

2. Breakdown支援
   - 「Breakdown」ボタンでプロンプト生成
   - 定型プロンプトの表示・編集
   - 「Copy for Cursor auto」ボタン
   - 生成プロンプト履歴の保存

3. プロンプト生成
   - 入力: タスク情報、context.mdc、Features Registry
   - 出力: MECEなサブタスク一覧（完了基準付き）、不明点、参照リンク
   - 制約: 冗長禁止、外部API不使用

4. プロンプト辞書
   - 定型フレーズの一元管理（prompts.json）
   - 例: 「要求をMECEに分解してください」「完了基準を定義してください」
   - 再利用可能なプロンプトパーツの共有
   - 辞書の検索・挿入機能

優先度: 高（Phase 1-2）

#### FEAT-0003 (FR-03): Quality Gates（品質検証）

目的: ドキュメント構造の品質を自動検証

要件:

1. 自動検証
   - Tree表示時に自動実行
   - 手動実行（Validateボタン）

2. 検証項目
   - DOC-01: Breadcrumbsブロックの存在
   - DOC-02: Layer定義の準拠
   - DOC-03: リンクパスの存在確認
   - DOC-04: 循環参照の検出

3. 結果表示
   - ツリーノードに警告/エラーアイコン
   - 詳細パネルに違反リスト表示
   - 「Open」「Fix Prompt」アクション

優先度: 高（Phase 1）

#### FEAT-0004 (FR-04): Context切替（デバッグモード）

目的: 開発時のみRepo/Nexusコンテキストを切替

要件:

1. デバッグ時のみ表示
2. 選択: Repo / Nexus
3. 切替時にページリロード
4. 選択状態をlocalStorageに保存

優先度: 中（Phase 1）

#### FEAT-0005 (FR-05): AIモデル拡張対応（将来）

目的: Cursor以外のAIモデル・プラットフォームにも対応可能なアーキテクチャ

要件:

1. AIプロバイダー抽象化
   - AIプロバイダーインターフェースの定義
   - 現在: Cursor (定額)
   - 将来: Claude、GPT-4、Gemini等への拡張対応
   - プロバイダー切り替え設定

2. プロンプトテンプレートの共通化
   - プロバイダー非依存のテンプレート定義
   - 各プロバイダーの特性に応じた最適化
   - プロンプト履歴の一元管理

3. コスト管理
   - 使用量の記録（トークン数、リクエスト数）
   - コスト予算の設定・監視
   - 定額優先、従量課金の使い分け

優先度: 中（Phase 2以降）

#### FEAT-0006 (FR-06): ドキュメントベースBI基盤（将来）

目的: ドキュメントを利用した現状把握・分析・意思決定支援

要件:

1. 現状把握ダッシュボード
   - ドキュメント階層の完全性チェック
   - 未実装・レビュー中・完了の比率表示
   - DAG欠損ノードの検出
   - トレーサビリティカバレッジ可視化

2. 進捗トラッキング
   - タスク完了率の推移
   - FEATごとの完成度
   - Quality Gates通過率の推移

3. 分析レポート
   - ドキュメント更新頻度
   - 依存関係の複雑度分析
   - ボトルネック検出（レビュー待ちが多いノード）

4. データエクスポート
   - JSON形式での構造データ出力
   - 外部BIツール連携（Tableau、Metabase等）
   - 定期レポート自動生成

優先度: 低（Phase 3以降）

#### FEAT-0007 (FR-07): ルール変更の自動反映

目的: Quality Gatesやドキュメントルール（章番号、目次、命名規則等）の変更を全ドキュメントに自動反映

要件:

1. ルール定義の一元管理
   - `docs/GATES/document.mdc`: ゲート定義の中心
   - ルール変更時はこのファイルのみ更新
   
2. 自動反映機能
   - ルール変更を検出（GATES/document.mdcの変更監視）
   - 影響を受けるドキュメントを自動判定
   - 変更差分の表示と確認
   - 一括更新の実行

3. 更新対象の判定ロジック
   - 全ドキュメントをスキャン
   - 現在のルールバージョンと照合
   - 未準拠または不一致ドキュメントを特定
   - 準拠状況のダッシュボード表示

4. 更新方式の選択
   - 自動更新: 機械的に適用できる変更
   - 半自動更新: ユーザー確認を挟む更新
   - 手動更新: コンテキスト考慮が必要な変更

5. 検証と通知
   - 更新後のバリデーション実行
   - Quality Gates結果の比較
   - 更新履歴の記録（変更ログ）
   - エラー時のロールバック機能

優先度: 中（Phase 2-3）

#### FEAT-0008 (FR-08): 次のアクション自動提案

目的: 「次に何をすべきか」を自動で提案し、意思決定をサポート

背景:
開発者が次に何をすべきか迷うことは生産性を大きく損なう。
タスク管理で手動登録を前提にすると、優先順位付けやタスク生成自体がボトルネックになる。

要件:

1. 提案エンジン
   - 現状分析: 完了タスク、進行中タスク、未完了タスクの分析
   - 依存関係分析: DAGから実行可能なタスクを特定
   - 優先度計算: カテゴリ、FEAT-ID、期限から優先度スコア算出
   - 推奨アクション生成: 最も実行すべきタスクを自動提案

2. 提案内容
   - 推奨タスクの表示（最も効率的な次のアクション）
   - 代替案の提示（複数の選択肢）
   - 理由の説明（なぜこのタスクが推奨されるか）
   - 必要なリソースの提示（関連ドキュメント、参照リンク）

3. アクションパネル
   - 「推奨アクション」ボタン: 最新の分析結果を表示
   - タスクへの1-clickジャンプ: 提案されたタスクを直接開始
   - 提案理由の詳細表示（アルゴリズムの説明）
   - 提案の更新（ステータス変更時に再計算）

4. 学習機能（将来）
   - ユーザーの選択履歴を記録
   - 提案精度の改善
   - 個人の作業パターンに合わせた最適化

優先度: 高（Phase 2）

#### FEAT-0014 (FR-14): FEAT横断検索・統合表示

目的: FEAT番号を基に関連ドキュメント（PRD/UX/API/DATA/QA）を横断的に収集し、統合表示・コピー可能にする

背景:
機能開発・改修時には、画面仕様、機能仕様、API仕様、データ仕様、テストケースなど複数のドキュメントにまたがる情報を確認する必要がある。
これらがバラバラのドキュメントに散在していると、情報収集に時間がかかり、見落としが発生しやすい。
FEAT番号を軸に関連情報を一括で収集・表示することで、AI（Cursor）への入力品質を向上させ、機能改修の網羅性を高める。

要件:

1. FEAT番号入力による横断検索
   - 検索対象: PRD, UX, API, DATA, QA 層のドキュメント
   - 検索キー: FEAT-ID（例: FEAT-0001, FEAT-0014）
   - 検索方式: 全文検索でFEAT-ID文字列マッチ
   - 該当セクション抽出: FEAT-IDが記載されている見出し・段落・表を抽出

2. 統合表示
   - 各ドキュメントから該当FEAT番号に関連する情報を収集
   - レイヤー別に整理して表示:
     - PRD: 機能要件・ビジネス要求
     - UX: 画面仕様・ユーザーフロー
     - API: APIエンドポイント・インターフェース仕様
     - DATA: データモデル・スキーマ定義
     - QA: テストケース・検証項目
   - 各セクションにドキュメント名とパスを明示
   - 元ドキュメントへのリンク機能

3. コピー機能
   - 統合表示された内容を1クリックでクリップボードにコピー
   - AI（Cursor）へのインプットとして利用可能な形式で出力
   - Markdown形式で出力（セクション区切り明確化）
   - コピー内容には以下を含む:
     - FEAT-ID
     - 各レイヤーのセクション（見出し付き）
     - 元ドキュメントのパス情報

4. 品質向上支援
   - 統合情報をAIへ入力することで、機能改修時の網羅性向上
   - 関連情報の見落とし防止
   - 複数ドキュメントを手動で開く手間を削減
   - context.mdcと組み合わせることで完全なコンテキストを提供

5. UIコンポーネント
   - FEAT-ID入力フィールド（オートコンプリート対応）
   - 検索実行ボタン
   - レイヤー別の結果表示パネル
   - 「すべてコピー」ボタン
   - 「元ドキュメントを開く」リンク

優先度: 中（Phase 2-3）

#### FEAT-0015 (FR-15): プロンプト生成補助機能

目的: 3つの対象種別（タスク、ドキュメント、バリデーション違反）に対して、Cursor autoで使えるプロンプトを生成し、AI支援ワークフローを効率化する

背景:
AIを活用した開発において、適切なプロンプトを作成することは非常に重要だが、毎回ゼロから書くのは非効率的。
タスク分解、ドキュメント整備、バリデーション違反の修正という3つの主要なシナリオに対して、
標準化されたプロンプトテンプレートを提供し、状況に応じた最適なプロンプトを自動生成することで、
AI活用の生産性と品質を大幅に向上させる。

要件:

1. 対象種別の定義
   - タスクベース: タスク情報（タイトル、カテゴリ、優先度、FEAT-ID、関連ドキュメント）からタスク分解プロンプトを生成
   - ドキュメントベース: 単一または複数のドキュメントを対象にした編集・整備プロンプトを生成
   - バリデーション違反ベース: Quality Gates違反（DOC-01〜DOC-08, TC-01〜TC-04）に対する修正プロンプトを生成

2. 共通テンプレート構造
   - ヘッダー: AI役割の定義（例: 「あなたはプロジェクトの実装ブレークダウン設計者です」）
   - 制約: 外部API不使用、冗長禁止、MECE原則遵守など
   - 入力: 対象情報（タスク詳細、ドキュメントパス、違反内容など）
   - 出力: 期待される成果物の形式（サブタスク一覧、修正内容、参照リンクなど）

3. タスクベースプロンプト生成（既存機能の拡張）
   - 入力: Task情報（title, category, priority, featId, links）
   - テンプレート: Cursorプロバイダーで定義済み
   - 出力: MECEなサブタスク一覧（各項目に完了基準付き）、不明点、参照リンク
   - UI: TasksWorkspaceの「プロンプト生成」ボタン

4. ドキュメントベースプロンプト生成（新規）
   - 対象: 単一ドキュメントまたは複数ドキュメント
   - ユースケース:
     - 章番号の整備
     - 目次の追加
     - Breadcrumbsの修正
     - 内容の拡充・整理
   - プロンプトパーツ: DOC-RD-01（章番号整備）、DOC-RD-02（目次追加）など
   - UI統合: Docs Navigatorに「ドキュメント編集プロンプト生成」機能を追加

5. バリデーション違反ベースプロンプト生成（新規）
   - トリガー: Quality Gates実行後の違反検出
   - 対象違反:
     - DOC-01: Breadcrumbsブロック必須
     - DOC-02: Layer定義準拠
     - DOC-03: リンクパス存在確認
     - DOC-04: 循環参照検出
     - DOC-05: 章番号必須
     - DOC-06: 目次必須
     - DOC-07: 命名規則必須
     - DOC-08: 内容範囲の明示必須
     - TC-01〜TC-04: テストケース関連
   - プロンプト内容:
     - 違反の説明
     - 修正方法の具体的な指示
     - 正しい記述例
     - 関連するQuality Gate定義へのリンク
   - UI統合: 違反詳細パネルに「修正プロンプト生成」ボタンを追加

6. プロンプト辞書（prompts.json）
   - カテゴリ構造:
     - TASK_BREAKDOWN: タスク分解系プロンプトパーツ
     - DOC_REVIEW: ドキュメント整備系プロンプトパーツ
     - QUALITY_FLOW: 品質・検証系プロンプトパーツ
     - VALIDATION_FIX: バリデーション違反修正系プロンプトパーツ（新規）
   - 各プロンプトパーツ:
     - id: 一意識別子（例: DOC-FIX-01）
     - title: 表示名
     - description: 説明
     - body: プロンプトテンプレート本文
     - tags: 分類タグ

7. プロンプト生成フロー
   - ステップ1: 対象の選択（タスク/ドキュメント/違反）
   - ステップ2: コンテキスト情報の収集（関連ドキュメント、違反詳細など）
   - ステップ3: テンプレートの選択または自動選定
   - ステップ4: 変数の置換とプロンプト生成
   - ステップ5: プロンプトの表示・編集
   - ステップ6: クリップボードへのコピー
   - ステップ7: Cursor autoでの実行

8. UI要件
   - TasksWorkspace: 既存の「プロンプト生成」「コピー」ボタン（実装済み）
   - Docs Navigator: 「ドキュメント編集プロンプト生成」ボタン（新規）
   - Quality Gates結果パネル: 各違反に「修正プロンプト生成」ボタン（新規）
   - プロンプトプレビュー: 生成されたプロンプトの表示・編集エリア
   - コピーボタン: ワンクリックでクリップボードにコピー

9. データ要件
   - prompts.json: プロンプトテンプレート定義（拡張）
   - Task.breakdownPrompt: 生成されたタスク分解プロンプト（既存）
   - Task.lastBreakdownAt: 最終生成日時（既存）
   - 新規フィールド（将来拡張）:
     - promptHistory: 生成履歴
     - promptTemplateId: 使用したテンプレートID

10. 品質ゲート
    - PROMPT-01: 生成されたプロンプトに必須要素（ヘッダー、制約、入力、出力）が含まれる
    - PROMPT-02: プロンプトが冗長でなく簡潔である（推奨: 500文字以内）
    - PROMPT-03: MECEの原則が守られている
    - PROMPT-04: 外部API不使用の制約が明記されている

優先度: 高（Phase 1-2、タスクベースは実装済み、ドキュメントベースとバリデーション違反ベースは実装中）

### 2.2 非機能要件

#### NFR-01: ローカル運用

- : 外部API不使用、ローカルのみで完結
- : コスト削減、オフライン対応、セキュリティ

#### NFR-02: 軽量性

- : 起動時間<3秒、メモリ使用<200MB
- : Electron軽量設定、レンダラープロセスの最適化

#### NFR-03: 拡張性

- : 将来のワークスペース切替に備える
- : プラグイン化可能なアーキテクチャ

## 5. AI支援フロー

### 3.1 要求→タスク分解フロー

1. : 自然言語で要求を入力
2. : 人間が方向性を決定
3. : 定型プロンプトで詳細化依頼
4. : タスク分解、手順書、コード案
5. : 検証・バリデーション
6. : 承認済みのみをドキュメントとして登録

### 3.2 Cursor利用の制約

- : 全自動でない、人間が手動でCursorを呼ぶ運用
- : Cursor側で実施、軽い分解は本システムで実施
- : API呼び出しでの全自動化は回避

## 6. データモデル

### 4.1 ドキュメントメタデータ

```yaml
Breadcrumbs:
  Layer: PRD|ARCH|DEVELOPMENT|QA|GATES
  Upstream: [doc1.mdc, doc2.mdc]
  Downstream: [doc3.mdc]
```

### 4.2 Tasks（tasks.json）

```json
{
  "id": "unique-id",
  "title": "Task title",
  "category": "category",
  "priority": "high|medium|low",
  "status": "pending|in_progress|done",
  "featId": "FEAT-xxxx",
  "notes": "",
  "breakdownPrompt": "",
  "breakdownStatus": "DRAFT|READY|REVIEWED",
  "lastBreakdownAt": "ISO8601",
  "links": {
    "PRD": "...",
    "UX": "...",
    "API": "...",
    "DATA": "...",
    "QA": "..."
  }
}
```

### 4.3 DAG構造

- ノード: ドキュメント（パス、レイヤー、メタデータ）
- エッジ: Upstream/Downstreamリンク
- トレーサビリティ: 最上位要求から最下位手順まで双方向で辿れる

## 7. 段階的実装計画

### Phase 1: Foundation（最優先）

- [x] Docs Navigator（Docs/FEATs/Orphans）
- [x] Tasks（登録・編集・保存・エクスポート）
- [x] Tree表示（Upstream/Downstream切替）
- [x] DAG Quality Gates（DOC-01〜04）
- [x] Context切替（デバッグモード）
- [x] E2Eテスト実装

### Phase 2: Automation

- [ ] Breakdownプロンプト生成
- [ ] Gate-BD評価UI
- [ ] FEAT-ID自動推定
- [ ] Cursor連携フロー
- [ ] ルール変更の自動反映（FR-07）
- [ ] ルール変更検出と更新対象の判定
- [ ] 一括更新機能（自動/半自動/手動）
- [ ] 次のアクション自動提案（FR-08）
- [ ] 提案エンジン: 現状分析と依存関係解析
- [ ] 優先度アルゴリズム実装
- [ ] アクションパネルUI
- [ ] AIプロバイダー抽象化（FR-05）
- [ ] プロンプトテンプレート共通化
- [ ] コスト管理機能

### Phase 3: Quality Gate高度化

- [ ] コード検証の自動化
- [ ] セキュリティチェック
- [ ] 命名規約チェック
- [ ] レイヤー分割規約チェック

### Phase 4: リポジトリ連携 + BI基盤

- [ ] 承認済みアウトプットの自動コミット
- [ ] PR作成・更新連携
- [ ] 進捗の自動トラッキング
- [ ] 現状把握ダッシュボード（FR-06）
- [ ] 進捗トラッキング可視化
- [ ] 分析レポート生成
- [ ] データエクスポート機能

## 8. 非スコープ

- 外部AI API統合（従量課金の発生）
- リアルタイム同期（ローカルのみ）
- モバイル対応（Desktop専用）
- 複数ユーザー協調編集

## 9. 成果物

### 7.1 プロダクト

- Electronアプリ（nexus-ai）
- ドキュメントテンプレート
- Quality Gates定義

### 7.2 ドキュメント

- PRD（本要求定義書）
- ARCH（アーキテクチャ設計）
- DEVELOPMENT（開発ガイド）
- QA（テスト戦略・実行手順）

## 10. 完了基準

### Phase 1完了条件

- [x] Tree表示が正常に動作
- [x] Quality Gates検証が機能
- [x] Tasks登録・保存・エクスポートが動作
- [x] E2Eテストが成功
- [x] Docs Navigatorでドキュメント階層を辿れる

### Phase 2完了条件

- [ ] Breakdownプロンプトが生成される
- [ ] Gate-BDで80%以上の品質を満たす
- [ ] Cursorとの連携が確立

### Phase 3完了条件

- [ ] Quality Gatesが高度化
- [ ] コード検証が自動化
- [ ] 承認プロセスが確立

---

:
- `docs/PRD/index.mdc`: PRD一覧
- `docs/ARCH/index.mdc`: アーキテクチャ設計
- `docs/DEVELOPMENT/index.mdc`: 開発ガイド
- `docs/QA/index.mdc`: テスト戦略
- `docs/GATES/document.mdc`: Quality Gates定義
