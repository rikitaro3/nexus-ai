# PRD: Nexus - Strategy & Vision

> Breadcrumbs
> Layer: PRD
> Upstream: tools/nexus/docs/PRD/index.mdc
> Downstream: tools/nexus/docs/ARCH/index.mdc, tools/nexus/docs/DEVELOPMENT/index.mdc, tools/nexus/docs/QA/index.mdc

## 全体コンセプト / 目的

ソフトウェア開発のあらゆるドキュメント（経営戦略レベル〜リリース手順レベル）を、一貫した階層構造で管理・参照できるようにする。

すべての下位の設計・作業・手順は、最上位の事業戦略や経営戦略にトレース（辿っていける）できるべきという思想を徹底する。

その体系をツリーで可視化できるシステムを構築する。

以降でつくる要件定義書・仕様書は、最終的にマークダウンとしてリポジトリに入るような想定でまとめる。

## ドキュメント体系 / 構造

### 階層構造

ドキュメントは「事業戦略 → プロダクト戦略 → 機能要件 → 詳細設計 → 実装手順・運用手順・テスト手順」のようにトップダウンでブレークダウンされる。

各ドキュメントは、上位ドキュメントと下位ドキュメントの関連が明示されていて、辿れるようにしたい。

### DAGモデル

この関係は単なる親子フォルダではなく、DAG（有向非巡回グラフ）的に「上位→下位」の依存/根拠関係としてモデル化する。

**例**：
```
事業戦略
  └─ ある品質要求
       └─ 「E2Eテスト基盤を整備するべき」という技術課題
            └─ 具体的なE2E環境セットアップ手順書
```

「なぜこの作業が存在するのか？」を遡れることと「この要求はどの作業で満たされるのか？」を降りられること、両方を実現する。

### ドキュメントテンプレートの統一

ドキュメントのテンプレート（ひな型）も統一して、階層間のリンク項目を揃える（上位参照・下位参照など）。

## ドキュメント閲覧UI（ビューワー）

### 通常のディレクトリ構造の限界

通常のディレクトリ/フォルダ構造だけ並べても覚えられないので、それでは不十分。

ツリー（階層）として論理的な関係をGUIで可視化・ナビゲーションできるビューワー機能が必要。

### 機能要件

- 上位→下位の流れを展開して見れる
- 任意のノード（ドキュメント）をクリックすると内容を読める
- 構造自体を理解・表示するためのUIが必要

この「閲覧＋構造を辿れるUI」を最優先で実装する。

## ドキュメントの種類とテンプレート化

### レイヤーごとのドキュメント種類

- 事業戦略書
- 機能仕様書
- 設計書
- 運用手順書
- リリース手順書
- データマイグレーション手順
- E2Eテストガイド
など

### テンプレート項目

各種類ごとにテンプレートを用意し、最低限入れるべき項目を揃える：

1. **目的 / 背景**（どの上位要求から来たのか）
2. **要件 / 仕様**
3. **実現ステップ / 手順**
4. **依存関係**（他ドキュメントへのリンク）
5. **下位アウトプット**（このドキュメントからさらに何が作られるべきか）

### テストドキュメントのテンプレート化

テスト領域も同様にテンプレート化：

- E2Eテスト環境のセットアップ手順（環境構築ドキュメント）
- 運用方法（テストをどう回すかという運用ドキュメント）
- 各テストケースの書き方・管理ルール（テストケースドキュメントの体系）

### 方針

たとえ「1回しか見ないような手順書」（例：E2E環境セットアップ）でもちゃんと残すべき、という方針。

## AIを使った要求→タスク分解フロー（半自動ワークフロー）

### 入力：自然言語による要求

最初の「要求」は自然言語（音声でもいい）で投げる想定。

**例**：「品質をもっと上げたい」

### 抽象課題の提案

その要求から、AIが抽象課題や方向性を提案する。

**例**：「品質を上げたい」→「E2Eテスト基盤を整備しましょう」

### 実現ステップの自動生成

さらにその抽象課題から、AIが実現ステップのたたき台を出す。

**例**：
```
「E2Eテスト基盤を整備するには」
1) テストフレームワーク選定
2) テストランナー環境構築
3) サンプルシナリオ作成
...
```

### 詳細化のフロー

そのステップ案をもとに、あなたがそれを受け取って、Cursorなど別のAI（サブエージェント的なもの）に投げて、より詳細な手順やコード、設計のドラフトを生成する。

ここはまず手動オペでもOK。コストの観点から、重いAPI呼び出しで全自動化しすぎるのは避ける。

Cursorは定額で使えるので「重い分解」はCursor側でやる運用イメージ。

### ドキュメント登録

その返ってきたステップ・手順・コード断片・設計指針を、ドキュメント管理システム側に登録する。

登録すると、そのステップは自動的にDAGの中の「どの上位要求から派生したノードか」にひも付けられる。

### タスクの細分化

その後、各ステップはさらに細分化（タスク分割）できるようにする。

分割されたものはまたドキュメント（詳細設計・実装手順・テストケースなど）として増えていく。

## 要求入力の扱い

### 自然言語による入力

最初のインプットは、「こういうことやりたい」と口頭で言うだけで済ませる。

その口頭の要求をシステム化する。

### 最上位レイヤーへの登録

会話ベースの要求が、そのまま最上位レイヤー（例：ビジネス要求/改善要求）として登録される。

### 自動ブレークダウン

そこから先のブレークダウン〜機能要件化〜設計化を半自動で進める。

### 最終成果物

最終的には、このフローで作られた成果物（Markdownなどのドキュメント群）が、リポジトリにコミットされていく状態を目指す。

## クオリティ（品質管理と検証）

### AIのクオリティゲートウェイ

AIが出したアウトプット（ドキュメントやコード）に対して、品質のゲートを用意する。

「AIのクオリティゲートウェイ」を仕組みとして導入する。

出力されたコードや手順がそのまま正しいかを検証するチェック工程を自動化・半自動化する。

これは単なるLintや型チェックだけでなく、期待する品質要件を満たしているかのバリデーションも含む。

### コードの品質ゲート

コードに対してはテスト（例：E2Eテスト、統合テストなど）を回して合否を見れるようにする。

### ドキュメントの品質ゲート

ドキュメントに対しても、必要な項目がそろっているか / 上位要求との紐付けがあるか / 下位成果物が定義されているか などを自動で検査する。

### ワークフローへの組み込み

この品質ゲートをワークフローの一部（承認プロセス的な位置）に組み込む。

## スコープ／優先度

### フェーズ1: 最優先（Foundation）

- **ドキュメントをツリー/DAGとして見れるビューア**
- **ドキュメントを階層的にひも付けて保持できる基礎構造**

### フェーズ2: 次優先（Automation）

- **要求 → タスク分解 → 詳細化 → ドキュメント生成**の半自動フロー

### フェーズ3: 品質保証（Quality Gate）

- **AIクオリティゲートウェイ（検証・バリデーションフロー）**を組み込む

### 長期ビジョン

あなたがしゃべった内容が自動で上位要求ノードとして登録され、そこからすべての開発・設計・テスト・運用ドキュメントが紐づき、リポジトリに反映されるところまで持っていく。
alwaysApply: true
---
