---
title: "システム要件定義書"
layer: "PRD"
template: "prd-system-requirements"
status: "active"
upstream:
  - "docs/PRD/index.mdc"
downstream:
  - "docs/ARCH/index.mdc"
tags:
  - "system-requirements"
  - "docs-governance"
---

# システム要件定義書

> Breadcrumbs
> Layer: PRD
> Upstream: docs/PRD/index.mdc
> Downstream: docs/ARCH/index.mdc

## 目次

0. [はじめに](#0-はじめに)
   1. [文書の位置づけ](#01-文書の位置づけ)
   2. [このドキュメントの目的](#02-このドキュメントの目的)
   3. [FR（機能要件）とは](#03-fr機能要件とは)
   4. [WI（Work Item、作業項目）とは](#03a-wiwork-item作業項目とは)
   5. [REQ-FEAT-FRトレーサビリティマトリクス](#04-req-feat-frトレーサビリティマトリクス)
   6. [FR一覧](#05-fr一覧)
   7. [FR-WIトレーサビリティマトリクス](#06-fr-wiトレーサビリティマトリクス)
   8. [WI一覧（サンプル：FR-001〜FR-016）](#07-wi一覧サンプルfr-001fr-016)
1. [機能要件の技術的実現方針](#1-機能要件の技術的実現方針)
   1. [FR-01: Docs Navigator](#11-fr-01-docs-navigator)
   2. [FR-02: Tasks](#12-fr-02-tasks)
   3. [FR-03: Quality Gates](#13-fr-03-quality-gates)
      1. [DOC-01: YAMLフロントマターとBreadcrumbs整合](#131-doc-01-yamlフロントマターとbreadcrumbs整合)
      2. [DOC-02: Layer定義準拠](#132-doc-02-layer定義準拠)
      3. [DOC-03: リンクパス存在確認](#133-doc-03-リンクパス存在確認)
      4. [DOC-04: 循環参照検出](#134-doc-04-循環参照検出)
      5. [DOC-05: 章番号必須](#135-doc-05-章番号必須)
      6. [DOC-06: 目次必須](#136-doc-06-目次必須)
      7. [DOC-07: 命名規則必須](#137-doc-07-命名規則必須)
      8. [DOC-08: 内容範囲の明示必須](#138-doc-08-内容範囲の明示必須)
      9. [TC-01: テストケース命名規則準拠](#139-tc-01-テストケース命名規則準拠)
      10. [TC-02: テストケース独立性](#1310-tc-02-テストケース独立性)
      11. [TC-03: テストケースドキュメント化](#1311-tc-03-テストケースドキュメント化)
      12. [TC-04: テストデータ管理](#1312-tc-04-テストデータ管理)
   4. [FR-09: Settings](#19-fr-09-settings)
   5. [FR-04: Context切替](#14-fr-04-context切替)
   6. [FR-05: AIモデル拡張対応（将来）](#15-fr-05-aiモデル拡張対応将来)
   7. [FR-06: ドキュメントベースBI基盤（将来）](#16-fr-06-ドキュメントベースbi基盤将来)
   8. [FR-07: ルール変更の自動反映](#17-fr-07-ルール変更の自動反映)
   9. [FR-08: 次のアクション自動提案](#18-fr-08-次のアクション自動提案)
   10. [FR-10: ドキュメント生成テンプレート](#110-fr-10-ドキュメント生成テンプレート)
   11. [FR-14: FEAT横断検索・統合表示](#114-fr-14-feat横断検索統合表示)
2. [非機能要件の技術的実現方針](#2-非機能要件の技術的実現方針)
   1. [NFR-01: ローカル運用](#21-nfr-01-ローカル運用)
   2. [NFR-02: 軽量性](#22-nfr-02-軽量性)
   3. [NFR-03: 拡張性](#23-nfr-03-拡張性)
3. [技術スタック選定理由](#3-技術スタック選定理由)
   1. [Electron](#31-electron)
   2. [TypeScript](#32-typescript)
   3. [Playwright](#33-playwright)
4. [技術制約](#4-技術制約)
   1. [Electronの制約](#41-electronの制約)
   2. [ローカル完結の制約](#42-ローカル完結の制約)
   3. [セキュリティの制約](#43-セキュリティの制約)
5. [データ要件](#5-データ要件)
   1. [データモデル](#51-データモデル)
   2. [データフロー](#52-データフロー)
6. [インターフェース要件](#6-インターフェース要件)
   1. [ファイルシステムインターフェース](#61-ファイルシステムインターフェース)
   2. [IPC](#62-ipcinter-process-communication)
   3. [システムコール](#63-システムコール)
7. [運用・保守計画](#7-運用保守計画)
   1. [開発環境](#71-開発環境)
   2. [ビルド・デプロイ](#72-ビルドデプロイ)
   3. [バージョン管理](#73-バージョン管理)
   4. [障害対応](#74-障害対応)
8. [リスク管理](#8-リスク管理)
   1. [技術的リスク](#81-技術的リスク)
   2. [運用リスク](#82-運用リスク)
   3. [セキュリティリスク](#83-セキュリティリスク)

---

## 0. はじめに

このドキュメントは、PRDで定義された要求を技術的な実装要件に落とし込んだ「システム要件定義書」です。

### 0.1 文書の位置づけ

```
REQ (要求仕様) → FEAT (機能) → FR (機能要件) → ARCH (設計) → 実装
```

- REQ: なぜ作るか（WHY）
- FEAT: 何を作るか（WHAT、大粒度）
- FR: 何を作るか（WHAT、実装粒度）
- システム要件定義書: どの技術で実現するか（HOWの要件）
- ARCH: 具体的な設計（HOWの詳細）

### 0.2 このドキュメントの目的

- PRDのFEATをFR（機能要件、1〜2週間規模）に分解
- 各FRの技術仕様を定義
- 技術制約の明確化
- 実装方法の方向性の決定
- REQ-FEAT-FRのトレーサビリティ確保

### 0.3 FR（機能要件）とは

- **粒度**: 1〜2週間で実装完了できる単位
- **分解比率**: 1 FEAT → 3-7 FR
- **識別子**: FR-[NNN]（3桁ゼロパディング）
- **トレーサビリティ**: 各FRは親FEATおよび親REQに紐付く

### 0.3A WI（Work Item、作業項目）とは

- **粒度**: 1〜5日で完了できる具体的な実装タスク
- **分解比率**: 1 FR → 2-5 WI
- **識別子**: WI-[NNNNN]（5桁ゼロパディング）
- **トレーサビリティ**: 各WIは親FR、親FEAT、親REQに紐付く
- **種類**: 実装系、テスト系、ドキュメント系、インフラ系、リファクタリング系

### 0.4 REQ-FEAT-FRトレーサビリティマトリクス

本ドキュメントでは、18個のFEATを56個のFR（機能要件）に分解しています。

| REQ-ID | FEAT-ID | FEAT名 | FR-ID範囲 | FR数 | 優先度 | ステータス |
|--------|---------|--------|-----------|------|--------|-----------|
| REQ-001 | FEAT-001 | Docs Navigator | FR-001〜FR-006 | 6 | High | 実装中 |
| REQ-002 | FEAT-002 | Tasks | FR-007〜FR-011 | 5 | High | 実装中 |
| REQ-003 | FEAT-003 | Quality Gates | FR-012〜FR-016 | 5 | High | 実装中 |
| REQ-001 | FEAT-004 | Context切替 | FR-017〜FR-018 | 2 | Medium | 計画中 |
| REQ-002 | FEAT-005 | AIモデル拡張対応 | FR-019〜FR-021 | 3 | Low | 未定 |
| REQ-001 | FEAT-006 | ドキュメントベースBI基盤 | FR-022〜FR-025 | 4 | Low | 未定 |
| REQ-003 | FEAT-007 | ルール変更の自動反映 | FR-026〜FR-029 | 4 | Medium | 計画中 |
| REQ-002 | FEAT-008 | 次のアクション自動提案 | FR-030〜FR-033 | 4 | Medium | 計画中 |
| REQ-001 | FEAT-009 | 詳細カード共通コンポーネント | FR-034〜FR-035 | 2 | High | 実装済み |
| REQ-001 | FEAT-010 | ドキュメントツリー表示 | FR-036〜FR-037 | 2 | High | 実装済み |
| REQ-001 | FEAT-011 | オーファン検出 | FR-038〜FR-039 | 2 | Medium | 実装済み |
| REQ-001 | FEAT-012 | ドキュメント詳細表示 | FR-040〜FR-041 | 2 | High | 実装済み |
| REQ-001 | FEAT-013 | ツリーノード操作 | FR-042〜FR-043 | 2 | High | 実装済み |
| REQ-001 | FEAT-014 | FEAT横断検索 | FR-044〜FR-046 | 3 | Medium | 計画中 |
| REQ-002 | FEAT-015 | プロンプト生成補助 | FR-047〜FR-049 | 3 | High | 実装中 |
| REQ-001 | FEAT-021 | ドキュメントビューア | FR-050〜FR-051 | 2 | High | 未実装 |
| REQ-001 | FEAT-022 | ドキュメント編集機能 | FR-052〜FR-054 | 3 | High | 未実装 |
| REQ-003 | FEAT-023 | 修正プロンプト生成 | FR-055〜FR-056 | 2 | High | 未実装 |

**集計**:
- REQ-001（ドキュメント駆動開発）: 11 FEAT → 30 FR
- REQ-002（AI効率化）: 4 FEAT → 15 FR
- REQ-003（Quality Gates）: 3 FEAT → 11 FR
- **合計**: 18 FEAT → 56 FR

### 0.5 FR一覧

| FR-ID | FR名 | 親FEAT | 親REQ | 説明 | 優先度 | ステータス |
|-------|------|--------|-------|------|--------|-----------|
| FR-001 | ドキュメントツリー表示（Tree View基本実装） | FEAT-001 | REQ-001 | Breadcrumbsから構築したDAGをツリー構造で表示 | High | 実装済み |
| FR-002 | ツリーノード展開・折りたたみ機能 | FEAT-001 | REQ-001 | ノードの展開/折りたたみ状態管理 | High | 実装済み |
| FR-003 | Upstream/Downstream方向切替 | FEAT-001 | REQ-001 | トレーサビリティ方向の切替機能 | High | 実装済み |
| FR-004 | ドキュメント詳細表示パネル | FEAT-001 | REQ-001 | 選択ドキュメントの詳細情報表示 | High | 実装済み |
| FR-005 | Features Registry表示 | FEAT-001 | REQ-001 | FEAT-IDによる関連文書検索・表示 | Medium | 実装中 |
| FR-006 | オーファン検出機能 | FEAT-001 | REQ-001 | 孤立ドキュメント（上位・下位リンクなし）の検出 | Medium | 実装済み |
| FR-007 | タスク登録・編集機能 | FEAT-002 | REQ-002 | タスクのCRUD操作UI | High | 実装済み |
| FR-008 | タスクJSON保存・読込機能 | FEAT-002 | REQ-002 | tasks.jsonへの永続化とIPC経由の読み書き | High | 実装済み |
| FR-009 | タスクエクスポート機能 | FEAT-002 | REQ-002 | human_todo.mdcへのMarkdownエクスポート | Medium | 実装済み |
| FR-010 | Breakdownプロンプト生成機能 | FEAT-002 | REQ-002 | タスク分解プロンプトの自動生成 | High | 実装済み |
| FR-011 | プロンプト辞書管理機能 | FEAT-002 | REQ-002 | prompts.jsonの検索・挿入機能 | Medium | 計画中 |
| FR-012 | Quality Gates検証エンジン | FEAT-003 | REQ-003 | 品質基準に基づく自動検証フレームワーク | High | 実装済み |
| FR-013 | DOC-01〜08検証実装 | FEAT-003 | REQ-003 | ドキュメント品質ゲート検証ロジック | High | 実装済み |
| FR-014 | TC-01〜04検証実装 | FEAT-003 | REQ-003 | テストケース品質ゲート検証ロジック | High | 実装済み |
| FR-015 | 検証結果UI表示 | FEAT-003 | REQ-003 | ツリーノード警告アイコンと詳細パネル表示 | High | 実装済み |
| FR-016 | Fix Promptアクション機能 | FEAT-003 | REQ-003 | 違反に対する修正プロンプト生成アクション | High | 計画中 |
| FR-017 | デバッグモードContext切替UI | FEAT-004 | REQ-001 | Repo/Nexusコンテキスト切替UI | Medium | 実装済み |
| FR-018 | localStorage設定管理 | FEAT-004 | REQ-001 | 切替状態のlocalStorage永続化 | Medium | 実装済み |
| FR-019 | AIプロバイダーインターフェース定義 | FEAT-005 | REQ-002 | プロバイダー抽象化インターフェース | Low | 未実装 |
| FR-020 | プロンプトテンプレート共通化 | FEAT-005 | REQ-002 | プロバイダー非依存のテンプレート定義 | Low | 未実装 |
| FR-021 | コスト管理機能 | FEAT-005 | REQ-002 | 使用量記録とコスト予算監視 | Low | 未実装 |
| FR-022 | 現状把握ダッシュボード | FEAT-006 | REQ-001 | ドキュメント階層完全性チェックとカバレッジ可視化 | Low | 未実装 |
| FR-023 | 進捗トラッキング機能 | FEAT-006 | REQ-001 | タスク完了率とFEAT完成度の推移表示 | Low | 未実装 |
| FR-024 | 分析レポート生成 | FEAT-006 | REQ-001 | ドキュメント更新頻度と依存関係分析 | Low | 未実装 |
| FR-025 | データエクスポート機能 | FEAT-006 | REQ-001 | JSON形式データ出力と外部BIツール連携 | Low | 未実装 |
| FR-026 | ルール変更検出機能 | FEAT-007 | REQ-003 | GATES/document.mdc変更監視 | Medium | 未実装 |
| FR-027 | 影響ドキュメント判定 | FEAT-007 | REQ-003 | ルール変更影響を受けるドキュメント特定 | Medium | 未実装 |
| FR-028 | 一括更新実行機能 | FEAT-007 | REQ-003 | 自動/半自動/手動更新の実行 | Medium | 未実装 |
| FR-029 | 更新ロールバック機能 | FEAT-007 | REQ-003 | エラー時のロールバック処理 | Medium | 未実装 |
| FR-030 | タスク分析エンジン | FEAT-008 | REQ-002 | 完了・進行中・未完了タスクの分析 | Medium | 未実装 |
| FR-031 | 依存関係解析 | FEAT-008 | REQ-002 | DAGから実行可能タスクを特定 | Medium | 未実装 |
| FR-032 | 優先度計算アルゴリズム | FEAT-008 | REQ-002 | カテゴリ・FEAT-ID・期限から優先度スコア算出 | Medium | 未実装 |
| FR-033 | アクションパネルUI | FEAT-008 | REQ-002 | 推奨アクション表示とタスクジャンプ機能 | Medium | 未実装 |
| FR-034 | カードUIコンポーネント実装 | FEAT-009 | REQ-001 | Docs/Tree共通の詳細表示カードコンポーネント | High | 実装済み |
| FR-035 | カード表示データモデル | FEAT-009 | REQ-001 | カード表示に必要なデータ構造定義 | High | 実装済み |
| FR-036 | DAG構築アルゴリズム | FEAT-010 | REQ-001 | Upstream/Downstreamリンクからグラフ構築 | High | 実装済み |
| FR-037 | ツリー再帰レンダリング | FEAT-010 | REQ-001 | DAGをツリー構造で再帰的にDOM生成 | High | 実装済み |
| FR-038 | オーファン検出アルゴリズム | FEAT-011 | REQ-001 | 上位・下位リンクのないドキュメント特定 | Medium | 実装済み |
| FR-039 | オーファンリスト表示UI | FEAT-011 | REQ-001 | 検出されたオーファンのリスト表示 | Medium | 実装済み |
| FR-040 | メタデータ表示機能 | FEAT-012 | REQ-001 | ドキュメントのYAMLフロントマター表示 | High | 実装済み |
| FR-041 | 関連リンク表示機能 | FEAT-012 | REQ-001 | 上位/下位リンクと関連ドキュメントへのジャンプ | High | 実装済み |
| FR-042 | ノードクリック処理 | FEAT-013 | REQ-001 | ツリーノードクリック時の詳細表示処理 | High | 実装済み |
| FR-043 | ノード展開・折りたたみ処理 | FEAT-013 | REQ-001 | ノード状態変更とDOM更新処理 | High | 実装済み |
| FR-044 | FEAT-ID検索機能 | FEAT-014 | REQ-001 | FEAT-IDによる全文検索とセクション抽出 | Medium | 未実装 |
| FR-045 | レイヤー別統合表示 | FEAT-014 | REQ-001 | PRD/UX/API/DATA/QA層の統合表示 | Medium | 未実装 |
| FR-046 | クリップボードコピー機能 | FEAT-014 | REQ-001 | 統合情報のMarkdownコピー機能 | Medium | 未実装 |
| FR-047 | タスクベースプロンプト生成 | FEAT-015 | REQ-002 | タスク情報からMECE分解プロンプト生成 | High | 実装済み |
| FR-048 | ドキュメントベースプロンプト生成 | FEAT-015 | REQ-002 | ドキュメント編集・整備プロンプト生成 | High | 実装中 |
| FR-049 | バリデーション違反ベースプロンプト生成 | FEAT-015 | REQ-002 | Quality Gates違反修正プロンプト生成 | High | 実装中 |
| FR-050 | モーダルドキュメントビューア | FEAT-021 | REQ-001 | アプリ内モーダルでのドキュメント表示 | High | 未実装 |
| FR-051 | Markdownレンダリング機能 | FEAT-021 | REQ-001 | Markdown本文のHTML変換と表示 | High | 未実装 |
| FR-052 | ドキュメント編集UI | FEAT-022 | REQ-001 | テキストエディタUIとプレビュー機能 | High | 未実装 |
| FR-053 | ドキュメント保存機能 | FEAT-022 | REQ-001 | 編集内容のファイル保存とIPC連携 | High | 未実装 |
| FR-054 | 編集履歴管理 | FEAT-022 | REQ-001 | 編集履歴の記録と差分表示 | Medium | 未実装 |
| FR-055 | Quality Gate違反プロンプト生成 | FEAT-023 | REQ-003 | 違反内容から修正プロンプト自動生成 | High | 未実装 |
| FR-056 | プロンプトテンプレート管理 | FEAT-023 | REQ-003 | 違反種別ごとのテンプレート定義 | High | 未実装 |

### 0.6 FR-WIトレーサビリティマトリクス

本ドキュメントでは、56個のFRを約200個のWI（Work Item）に分解しています。

| FR-ID | FR名 | WI-ID範囲 | WI数 | 優先度 | ステータス |
|-------|------|-----------|------|--------|-----------|
| FR-001 | ドキュメントツリー表示 | WI-00001〜WI-00004 | 4 | High | 実装済み |
| FR-002 | ツリーノード展開・折りたたみ | WI-00005〜WI-00007 | 3 | High | 実装済み |
| FR-003 | Upstream/Downstream方向切替 | WI-00008〜WI-00010 | 3 | High | 実装済み |
| FR-004 | ドキュメント詳細表示パネル | WI-00011〜WI-00013 | 3 | High | 実装済み |
| FR-005 | Features Registry表示 | WI-00014〜WI-00017 | 4 | Medium | 実装中 |
| FR-006 | オーファン検出機能 | WI-00018〜WI-00020 | 3 | Medium | 実装済み |
| FR-007 | タスク登録・編集機能 | WI-00021〜WI-00025 | 5 | High | 実装済み |
| FR-008 | タスクJSON保存・読込 | WI-00026〜WI-00028 | 3 | High | 実装済み |
| FR-009 | タスクエクスポート | WI-00029〜WI-00031 | 3 | Medium | 実装済み |
| FR-010 | Breakdownプロンプト生成 | WI-00032〜WI-00035 | 4 | High | 実装済み |
| FR-011 | プロンプト辞書管理 | WI-00036〜WI-00039 | 4 | Medium | 計画中 |
| FR-012 | Quality Gates検証エンジン | WI-00040〜WI-00044 | 5 | High | 実装済み |
| FR-013 | DOC-01〜08検証実装 | WI-00045〜WI-00052 | 8 | High | 実装済み |
| FR-014 | TC-01〜04検証実装 | WI-00053〜WI-00056 | 4 | High | 実装済み |
| FR-015 | 検証結果UI表示 | WI-00057〜WI-00060 | 4 | High | 実装済み |
| FR-016 | Fix Promptアクション | WI-00061〜WI-00064 | 4 | High | 計画中 |
| FR-017〜FR-056 | （残り40 FR） | WI-00065〜WI-00200 | 約136 | - | - |

**集計**:
- FR-001〜FR-016（高優先度）: 16 FR → 64 WI
- FR-017〜FR-056（中・低優先度）: 40 FR → 約136 WI
- **合計**: 56 FR → 約200 WI

### 0.7 WI一覧（サンプル：FR-001〜FR-016）

以下は高優先度FR（FR-001〜FR-016）のWI一覧です。

| WI-ID | WI名 | 親FR | 種類 | 工数 | ステータス |
|-------|------|------|------|------|-----------|
| WI-00001 | parseAllBreadcrumbs関数実装 | FR-001 | 実装 | 1日 | 完了 |
| WI-00002 | buildDAG関数実装 | FR-001 | 実装 | 2日 | 完了 |
| WI-00003 | ツリーUIコンポーネント実装 | FR-001 | 実装 | 2日 | 完了 |
| WI-00004 | ツリー表示ユニットテスト | FR-001 | テスト | 1日 | 完了 |
| WI-00005 | ノード状態管理実装 | FR-002 | 実装 | 1日 | 完了 |
| WI-00006 | toggleNode関数実装 | FR-002 | 実装 | 1日 | 完了 |
| WI-00007 | 展開・折りたたみテスト | FR-002 | テスト | 1日 | 完了 |
| WI-00008 | 方向切替UI実装 | FR-003 | 実装 | 1日 | 完了 |
| WI-00009 | rebuildTree関数実装 | FR-003 | 実装 | 1日 | 完了 |
| WI-00010 | 方向切替テスト | FR-003 | テスト | 1日 | 完了 |
| WI-00011 | DetailCardコンポーネント実装 | FR-004 | 実装 | 2日 | 完了 |
| WI-00012 | メタデータ表示実装 | FR-004 | 実装 | 1日 | 完了 |
| WI-00013 | 詳細パネルテスト | FR-004 | テスト | 1日 | 完了 |
| WI-00014 | parseFeatRegistry関数実装 | FR-005 | 実装 | 1日 | 進行中 |
| WI-00015 | searchByFeatId関数実装 | FR-005 | 実装 | 1日 | 進行中 |
| WI-00016 | 関連文書表示UI実装 | FR-005 | 実装 | 2日 | 未着手 |
| WI-00017 | Features Registryテスト | FR-005 | テスト | 1日 | 未着手 |
| WI-00018 | detectOrphans関数実装 | FR-006 | 実装 | 1日 | 完了 |
| WI-00019 | オーファンリストUI実装 | FR-006 | 実装 | 1日 | 完了 |
| WI-00020 | オーファン検出テスト | FR-006 | テスト | 1日 | 完了 |
| WI-00021 | TaskFormコンポーネント実装 | FR-007 | 実装 | 2日 | 完了 |
| WI-00022 | CRUD操作ロジック実装 | FR-007 | 実装 | 2日 | 完了 |
| WI-00023 | バリデーション実装 | FR-007 | 実装 | 1日 | 完了 |
| WI-00024 | タスク編集UIテスト | FR-007 | テスト | 1日 | 完了 |
| WI-00025 | タスクCRUD統合テスト | FR-007 | テスト | 1日 | 完了 |
| WI-00026 | tasks.json読み書き実装 | FR-008 | 実装 | 1日 | 完了 |
| WI-00027 | IPC通信実装 | FR-008 | 実装 | 1日 | 完了 |
| WI-00028 | ファイルI/Oテスト | FR-008 | テスト | 1日 | 完了 |
| WI-00029 | exportToMarkdown関数実装 | FR-009 | 実装 | 1日 | 完了 |
| WI-00030 | human_todo.mdc出力実装 | FR-009 | 実装 | 1日 | 完了 |
| WI-00031 | エクスポート機能テスト | FR-009 | テスト | 1日 | 完了 |
| WI-00032 | generateBreakdownPrompt実装 | FR-010 | 実装 | 2日 | 完了 |
| WI-00033 | テンプレート変数展開実装 | FR-010 | 実装 | 1日 | 完了 |
| WI-00034 | プロンプト生成UIテスト | FR-010 | テスト | 1日 | 完了 |
| WI-00035 | プロンプト品質テスト | FR-010 | テスト | 1日 | 完了 |
| WI-00036 | loadPromptDictionary実装 | FR-011 | 実装 | 1日 | 未着手 |
| WI-00037 | searchPrompts関数実装 | FR-011 | 実装 | 1日 | 未着手 |
| WI-00038 | プロンプト辞書UI実装 | FR-011 | 実装 | 2日 | 未着手 |
| WI-00039 | 辞書管理テスト | FR-011 | テスト | 1日 | 未着手 |
| WI-00040 | GateRegistry実装 | FR-012 | 実装 | 2日 | 完了 |
| WI-00041 | runAllGates関数実装 | FR-012 | 実装 | 2日 | 完了 |
| WI-00042 | DocRecord管理実装 | FR-012 | 実装 | 1日 | 完了 |
| WI-00043 | 検証エンジンテスト | FR-012 | テスト | 1日 | 完了 |
| WI-00044 | 検証フレームワークE2Eテスト | FR-012 | テスト | 1日 | 完了 |
| WI-00045 | DOC-01検証実装 | FR-013 | 実装 | 1日 | 完了 |
| WI-00046 | DOC-02検証実装 | FR-013 | 実装 | 1日 | 完了 |
| WI-00047 | DOC-03検証実装 | FR-013 | 実装 | 1日 | 完了 |
| WI-00048 | DOC-04検証実装 | FR-013 | 実装 | 1日 | 完了 |
| WI-00049 | DOC-05検証実装 | FR-013 | 実装 | 1日 | 完了 |
| WI-00050 | DOC-06検証実装 | FR-013 | 実装 | 1日 | 完了 |
| WI-00051 | DOC-07検証実装 | FR-013 | 実装 | 1日 | 完了 |
| WI-00052 | DOC-08検証実装 | FR-013 | 実装 | 1日 | 完了 |
| WI-00053 | TC-01検証実装 | FR-014 | 実装 | 1日 | 完了 |
| WI-00054 | TC-02検証実装 | FR-014 | 実装 | 1日 | 完了 |
| WI-00055 | TC-03検証実装 | FR-014 | 実装 | 1日 | 完了 |
| WI-00056 | TC-04検証実装 | FR-014 | 実装 | 1日 | 完了 |
| WI-00057 | renderGateResults関数実装 | FR-015 | 実装 | 2日 | 完了 |
| WI-00058 | 違反詳細パネルUI実装 | FR-015 | 実装 | 2日 | 完了 |
| WI-00059 | アイコン表示実装 | FR-015 | 実装 | 1日 | 完了 |
| WI-00060 | 結果表示UIテスト | FR-015 | テスト | 1日 | 完了 |
| WI-00061 | generateFixPrompt関数実装 | FR-016 | 実装 | 2日 | 未着手 |
| WI-00062 | テンプレート選択ロジック実装 | FR-016 | 実装 | 1日 | 未着手 |
| WI-00063 | Fix Promptボタン実装 | FR-016 | 実装 | 1日 | 未着手 |
| WI-00064 | Fix Prompt機能テスト | FR-016 | テスト | 1日 | 未着手 |

**NOTE**: FR-017〜FR-056のWI詳細は実装フェーズで段階的に定義します。

---

## 1. 機能要件の技術的実現方針

本セクションでは、各FRの技術的実現方法を定義します。FEATごとにFRをグルーピングして記述します。

### 1.1 FEAT-001: Docs Navigator（FR-001〜FR-006）

**親REQ**: REQ-001（ドキュメント駆動開発）
**優先度**: High
**ステータス**: 実装中

#### FR-001: ドキュメントツリー表示（Tree View基本実装）

**技術要件**:
- フレームワーク: Electron Renderer
- データソース: YAMLフロントマター（title/layer/upstream/downstream）
- 表示方法: Tree View（再帰的DOM生成）
- DAG構築: Map<string, Node>

**実装方針**:
- parseAllBreadcrumbs(): 全ドキュメントからフロントマター抽出
- buildTree(): DAG構造の構築
- renderTreeNode(): 再帰的DOM生成

**制約**:
- パフォーマンス: 1000ドキュメント程度まで想定
- メモリ: DAG全体をメモリ保持

**ステータス**: 実装済み

#### FR-002: ツリーノード展開・折りたたみ機能

**技術要件**:
- 状態管理: ノードごとの展開/折りたたみ状態
- イベント処理: クリックイベントハンドリング
- DOM操作: 子ノードの表示/非表示切替

**実装方針**:
- nodeState Map: ノードパスをキーに展開状態を保持
- toggleNode(path): 状態反転とDOM更新
- CSS classes: 'expanded', 'collapsed'

**ステータス**: 実装済み

#### FR-003: Upstream/Downstream方向切替

**技術要件**:
- 方向切替UI: ラジオボタンまたはトグルスイッチ
- DAG再構築: 方向に応じたエッジ逆転
- ツリー再レンダリング: 切替時の全体更新

**実装方針**:
- direction変数: 'upstream' | 'downstream'
- rebuildTree(direction): 方向に応じたツリー再構築
- localStorage: 選択状態の永続化

**ステータス**: 実装済み

#### FR-004: ドキュメント詳細表示パネル

**技術要件**:
- 表示内容: タイトル、Layer、Upstream/Downstreamリンク、メタデータ
- UI配置: サイドパネルまたはモーダル
- リンククリック: 他ドキュメントへのナビゲーション

**実装方針**:
- DetailCard コンポーネント（FEAT-009で共通化）
- window.docs.open(): IPC経由でドキュメント開く
- linkClickHandler(): リンククリックでツリー更新

**ステータス**: 実装済み

#### FR-005: Features Registry表示

**技術要件**:
- データソース: docs/PRD/index.mdc のFEAT一覧
- 検索機能: FEAT-IDによるフィルタリング
- 関連文書表示: FEAT-IDが記載された全ドキュメント

**実装方針**:
- parseFeatRegistry(): FEAT一覧パース
- searchByFeatId(featId): FEAT-ID検索
- displayRelatedDocs(): 関連文書リスト表示

**ステータス**: 実装中

#### FR-006: オーファン検出機能

**技術要件**:
- 検出ロジック: upstream/downstream両方が空のノード
- 表示方法: オーファンリスト（別タブまたはセクション）
- 警告表示: ツリーノードに警告アイコン

**実装方針**:
- detectOrphans(): DAG走査でオーファン検出
- orphansList: 検出結果を保持
- renderOrphansTab(): オーファン専用UI

**ステータス**: 実装済み

### 1.2 FEAT-002: Tasks（FR-007〜FR-011）

**親REQ**: REQ-002（AI効率化）
**優先度**: High
**ステータス**: 実装中

#### FR-007: タスク登録・編集機能

**技術要件**:
- UI: タスク入力フォーム（タイトル、カテゴリ、優先度、FEAT-ID、メモ）
- データモデル: Task { id, title, category, priority, status, featId, notes, links }
- CRUD操作: Create/Read/Update/Delete

**実装方針**:
- TaskForm コンポーネント
- 入力バリデーション: 必須フィールドチェック
- リアルタイム保存: 編集後即座にtasks.jsonへ保存

**ステータス**: 実装済み

#### FR-008: タスクJSON保存・読込機能

**技術要件**:
- ストレージ: ローカルファイル（tasks.json）
- IPC: window.tasks.readJson() / window.tasks.writeJson()
- フォーマット: JSON配列

**実装方針**:
- Main Process: fs.readFileSync() / fs.writeFileSync()
- エラーハンドリング: ファイル存在確認、JSON parse エラー処理
- バックアップ: git による手動バックアップ

**ステータス**: 実装済み

#### FR-009: タスクエクスポート機能

**技術要件**:
- 出力先: human_todo.mdc
- フォーマット: Markdown（見出し、リスト、チェックボックス）
- フィルタリング: statusによる出力制御

**実装方針**:
- exportToMarkdown(tasks): Task[] → Markdown文字列変換
- テンプレート: カテゴリ別にグルーピング
- window.tasks.export(): IPC経由でファイル書き込み

**ステータス**: 実装済み

#### FR-010: Breakdownプロンプト生成機能

**技術要件**:
- 入力: Task情報、context.mdc、Features Registry
- 出力: MECEなサブタスク一覧プロンプト
- テンプレート: prompts.jsonから読み込み

**実装方針**:
- generateBreakdownPrompt(task): プロンプト文字列生成
- 変数展開: {{title}}, {{featId}}, {{category}} など
- Cursorプロバイダー: プロンプトテンプレート管理

**ステータス**: 実装済み

#### FR-011: プロンプト辞書管理機能

**技術要件**:
- データソース: prompts.json
- 検索機能: カテゴリ、タグによるフィルタリング
- 挿入機能: プロンプト辞書からテンプレート挿入

**実装方針**:
- loadPromptDictionary(): prompts.json読み込み
- searchPrompts(query): 検索機能実装
- insertPrompt(id): 選択プロンプトをテキストエリアに挿入

**ステータス**: 計画中

### 1.3 FEAT-003: Quality Gates（FR-012〜FR-016）

**親REQ**: REQ-003（Quality Gates）
**優先度**: High
**ステータス**: 実装中

#### FR-012: Quality Gates検証エンジン

**技術要件**:
- 検証タイミング: Tree表示時の自動実行 + 手動実行（Validateボタン）
- 検証フレームワーク: プラグイン可能なGate登録・実行
- メタデータ解析: YAMLフロントマター + Markdown AST
- 結果集約: 全Gate結果をDocumentごとに集約

**実装方針**:
- GateRegistry: Quality Gate登録・管理
- runAllGates(docs): 全Gateを並列実行
- DocRecord: frontMatter + AST + タイトルを保持
- gray-matter: フロントマター抽出
- unified + remark: Markdown AST構築

**制約**:
- パフォーマンス: 1000ドキュメント × 12 Gates = 12000検証
- 依存: gray-matter, unified, remark-parse, remark-frontmatter, remark-gfm

**ステータス**: 実装済み

#### FR-013: DOC-01〜08検証実装

**技術要件**:
- DOC-01: YAMLフロントマターとBreadcrumbs整合
- DOC-02: Layer定義準拠
- DOC-03: リンクパス存在確認
- DOC-04: 循環参照検出
- DOC-05: 章番号必須
- DOC-06: 目次必須
- DOC-07: 命名規則必須
- DOC-08: 内容範囲の明示必須

**実装方針**:
- 各Gateを独立した関数として実装（`scripts/validate-docs-gates.js`）
- normalizeFrontMatter(): フロントマター正規化
- collectHeadings(): 見出し抽出（AST走査）
- findSectionByHeading(): セクション特定
- detectCycles(): DFSによる循環検出

**ステータス**: 実装済み

#### FR-014: TC-01〜04検証実装

**技術要件**:
- TC-01: テストケース命名規則準拠
- TC-02: テストケース独立性
- TC-03: テストケースドキュメント化
- TC-04: テストデータ管理

**実装方針**:
- テストファイルパターンマッチ: `/^[a-z-]+\.spec\.ts$/`
- コード解析: 正規表現によるパターン検出
- カバレッジ計算: ドキュメント化率の算出

**ステータス**: 実装済み

#### FR-015: 検証結果UI表示

**技術要件**:
- ツリーノードアイコン: 警告/エラーアイコン表示
- 詳細パネル: 違反リスト表示（Gate名、違反内容、ファイルパス）
- フィルタリング: Gate種別、重要度による絞り込み

**実装方針**:
- renderGateResults(results): 検証結果を UI に反映
- アイコン: CSS classes による警告/エラー表示
- 詳細パネル: クリックで違反詳細を展開

**ステータス**: 実装済み

#### FR-016: Fix Promptアクション機能

**技術要件**:
- アクション種別: 「Open」ボタン（エディタで開く）、「Fix Prompt」ボタン（修正プロンプト生成）
- プロンプト生成: 違反内容から修正プロンプト自動生成
- クリップボード: プロンプトのコピー機能

**実装方針**:
- generateFixPrompt(violation): 違反情報 → プロンプト文字列
- テンプレート: prompts.jsonから違反種別に応じたテンプレート選択
- window.clipboard.writeText(): クリップボードコピー

**ステータス**: 計画中

### 1.3.1 DOC-01: YAMLフロントマターとBreadcrumbs整合

#### 技術要件

- 検証タイミング: Tree表示時 + Validateボタンクリック
- 検証項目: YAMLフロントマターの存在と必須キー、H1タイトルとの整合
- 結果表示: UIにアイコン + 詳細パネル

#### 実装方針

- gray-matterでフロントマターを読み込み、title/layer/upstream/downstream/templateを必須チェック
- normalizeFrontMatter()でN/Aや空文字を排除し、配列フィールドを正規化
- extractDocumentTitle()で本文のH1を抽出し、frontMatter.titleと一致確認
- legacy Breadcrumbs表記は表示維持だが、検証ソースはYAMLフロントマターに一本化

#### 制約

- パフォーマンス: 全ドキュメントスキャン（1000件想定）
- 依存: gray-matter, normalizeFrontMatter, extractDocumentTitle
- ユーザー編集: すべてのドキュメントにフロントマターを追加する運用に変更

### 1.3.2 DOC-02: Layer定義準拠

#### 技術要件

- 検証タイミング: Tree表示時 + Validateボタンクリック
- 検証項目: フロントマター layer が定義済み8種のいずれかである
- 結果表示: UIにアイコン + 詳細パネル

#### 実装方針

- normalizeFrontMatter()でlayerを取得し、空文字の場合はDOC-02エラー
- layer値を大文字化してVALID_LAYERS配列と比較
- frontMatter由来のlayerが欠落する場合はinferLayerFromPath()で補完を試み、最終的に厳密チェック

#### 制約

- パフォーマンス: 全ドキュメントスキャン（1000件想定）
- 依存: normalizeFrontMatter, VALID_LAYERS, inferLayerFromPath
- ドキュメント命名規則とLayer補完の整合性に依存

### 1.3.3 DOC-03: リンクパス存在確認

#### 技術要件

- 検証タイミング: Tree表示時 + Validateボタンクリック
- 検証項目: Upstream/Downstreamパスの存在
- 結果表示: UIにアイコン + 詳細パネル

#### 実装方針

- frontMatter.upstream/downstreamは正規化済みの配列として取得
- 各リンクをnodes Mapと突き合わせ、不明なパスはDOC-03エラー
- fs.accessとコンテキストマップを併用し、未登録ファイルを特定

#### 制約

- パフォーマンス: 全ドキュメントスキャン（1000件想定）
- 精度: frontMatter配列の正規化に依存

### 1.3.4 DOC-04: 循環参照検出

#### 技術要件

- 検証タイミング: Tree表示時 + Validateボタンクリック
- 検証項目: DAG構造の循環参照検出
- 結果表示: UIにアイコン + 詳細パネル

#### 実装方針

- DAG構築: Upstream/Downstreamリンクからグラフ構築
- DFS実装: 深さ優先探索で循環検出
- 結果表示: 循環パスを可視化

#### 制約

- パフォーマンス: 全ドキュメントスキャン（1000件想定）
- 精度: グラフアルゴリズム精度に依存

### 1.3.5 DOC-05: 章番号必須

#### 技術要件

- 検証タイミング: Tree表示時 + Validateボタンクリック
- 検証項目: 章番号の存在と連続性
- 結果表示: UIにアイコン + 詳細パネル

#### 実装方針

- collectHeadings()でAST上のheadingノードを抽出
- レベル2/3見出しに対して章番号を分解し、親子整合と連番を検証
- 想定外の章番号・欠番・不整合は即座にDOC-05エラー

#### 制約

- パフォーマンス: 全ドキュメントスキャン（1000件想定）
- 精度: remark AST（mdast-util-to-string, unist-util-visit）による見出し抽出に依存

### 1.3.6 DOC-06: 目次必須

#### 技術要件

- 検証タイミング: Tree表示時 + Validateボタンクリック
- 検証項目: 目次ブロックの存在とリンク有効性
- 結果表示: UIにアイコン + 詳細パネル

#### 実装方針

- findSectionByHeading()で`## 目次`セクションを特定
- collectLinksFromSection()でAnchorリンクを抽出し、`#`始まりのみ許可
- collectHeadings()から生成したスラッグと比較し、未定義アンカーを検出

#### 制約

- パフォーマンス: 全ドキュメントスキャン（1000件想定）
- 精度: remark ASTベースのリンク抽出に依存

### 1.3.7 DOC-07: 命名規則必須

#### 技術要件

- 検証タイミング: Tree表示時 + Validateボタンクリック
- 検証項目: ファイル名の規則準拠
- 結果表示: UIにアイコン + 詳細パネル

#### 実装方針

- normalizeFrontMatter()/inferLayerFromPath()で層を特定し、selectNamingPattern()を選択
- `.mdc`拡張子を標準とし、例外はARCHレイヤーの既存`.md`のみ（段階的廃止）
- index.mdcは除外しつつ、その他ファイルに命名パターン違反があればDOC-07エラー

#### 制約

- パフォーマンス: 全ドキュメントスキャン（1000件想定）
- 精度: frontMatterのlayer値と命名規則の同期に依存
- `.md`許容は既存資産のみを対象とし、新規作成は`.mdc`に統一

### 1.3.8 DOC-08: 内容範囲の明示必須

#### 技術要件

- 検証タイミング: Tree表示時 + Validateボタンクリック
- 検証項目: 扱う内容/扱わない内容の記載
- 結果表示: UIにアイコン + 詳細パネル

#### 実装方針

- findSectionByHeading()で「扱う内容」「扱わない内容」「Scope」セクションを取得
- sectionHasListWithContent()で各セクションに実質的な箇条書きがあるかを検証
- collectListItemTexts()でScopeセクション内のキーワード（対象/除外）を確認

#### 制約

- パフォーマンス: 全ドキュメントスキャン（1000件想定）
- 精度: ASTベースのセクション抽出に依存

### 1.3.9 TC-01: テストケース命名規則準拠

#### 技術要件

- 検証タイミング: テストケース作成時 + CI/CD
- 検証項目: ファイル名が `[分類]-[機能]-[シナリオ].spec.ts` 形式に準拠
- 結果表示: CI/CDのエラー出力

#### 実装方針

- ファイル名パターンマッチ: `/^[a-z-]+\.spec\.ts$/`
- 分類・機能・シナリオの分割検証
- CI/CDでの自動チェック

#### 制約

- パフォーマンス: テストケース数（100件想定）
- 精度: ファイル名解析精度に依存

### 1.3.10 TC-02: テストケース独立性

#### 技術要件

- 検証タイミング: テストケース実行時
- 検証項目: 他のテストケースの結果への依存がないこと
- 結果表示: CI/CDのエラー出力

#### 実装方針

- 依存関係パターン検出: `test().*.then.*test()`, `it().*.then.*it()`
- setup/teardownの適切な使用確認
- 独立性の自動検証

#### 制約

- パフォーマンス: テストケース数（100件想定）
- 精度: コード解析精度に依存

### 1.3.11 TC-03: テストケースドキュメント化

#### 技術要件

- 検証タイミング: テストケース作成時 + CI/CD
- 検証項目: テストケースに目的と期待結果のコメントが記載されていること（目標: 80%以上）
- 結果表示: CI/CDのエラー出力

#### 実装方針

- コメント検出: `/**\s*目的[\s\S]*?期待結果[\s\S]*?\*/`
- カバレッジ計算: ドキュメント化されたテスト数 / 全テスト数
- 自動検証とレポート

#### 制約

- パフォーマンス: テストケース数（100件想定）
- 精度: コメント解析精度に依存

### 1.3.12 TC-04: テストデータ管理

#### 技術要件

- 検証タイミング: テストケース作成時 + CI/CD
- 検証項目: テストデータが `fixtures/` に配置され、setup/teardownが実装されていること
- 結果表示: CI/CDのエラー出力

#### 実装方針

- fixtures ディレクトリの存在確認
- setup/teardown 関数の検出: `setup|beforeAll`, `teardown|afterAll`
- データ管理の自動検証

#### 制約

- パフォーマンス: テストケース数（100件想定）
- 精度: コード解析精度に依存

### 1.4 FEAT-004: Context切替（FR-017〜FR-018）

**親REQ**: REQ-001（ドキュメント駆動開発）
**優先度**: Medium
**ステータス**: 実装済み

#### FR-017: デバッグモードContext切替UI

**技術要件**: デバッグ時のみRepo/Nexusコンテキストを切替可能なUI
**実装方針**: 環境変数NEXUS_DEBUGで表示制御、ラジオボタンでContext選択
**ステータス**: 実装済み

#### FR-018: localStorage設定管理

**技術要件**: 切替状態のlocalStorage永続化、ページリロードで反映
**実装方針**: `localStorage.setItem('context', value)`で保存
**ステータス**: 実装済み

### 1.5 FEAT-005〜FEAT-008: 将来機能・未実装機能

以下のFEATは優先度が低いか未実装のため、簡潔に記述します。

#### FEAT-005: AIモデル拡張対応（FR-019〜FR-021）

**親REQ**: REQ-002
**FR**:
- FR-019: AIプロバイダーインターフェース定義
- FR-020: プロンプトテンプレート共通化
- FR-021: コスト管理機能

**実装方針**: プロバイダー抽象化、Cursor/Claude/GPT-4対応、使用量記録
**ステータス**: 未実装（Phase 2以降）

#### FEAT-006: ドキュメントベースBI基盤（FR-022〜FR-025）

**親REQ**: REQ-001
**FR**:
- FR-022: 現状把握ダッシュボード
- FR-023: 進捗トラッキング機能
- FR-024: 分析レポート生成
- FR-025: データエクスポート機能

**実装方針**: Chart.js可視化、JSON形式エクスポート、外部BIツール連携
**ステータス**: 未実装（Phase 3以降）

#### FEAT-007: ルール変更の自動反映（FR-026〜FR-029）

**親REQ**: REQ-003
**FR**:
- FR-026: ルール変更検出機能（chokidarでGATES/document.mdc監視）
- FR-027: 影響ドキュメント判定（全ドキュメントスキャン）
- FR-028: 一括更新実行機能（自動/半自動/手動）
- FR-029: 更新ロールバック機能（Git連携）

**ステータス**: 未実装（Phase 2-3）

#### FEAT-008: 次のアクション自動提案（FR-030〜FR-033）

**親REQ**: REQ-002
**FR**:
- FR-030: タスク分析エンジン（完了・進行中・未完了の分析）
- FR-031: 依存関係解析（DAGから実行可能タスク特定）
- FR-032: 優先度計算アルゴリズム（スコア算出）
- FR-033: アクションパネルUI（推奨アクション表示）

**ステータス**: 未実装（Phase 2）

### 1.6 FEAT-009〜FEAT-013: 実装済み基盤コンポーネント

以下のFEATは実装済みの基盤コンポーネントです。

#### FEAT-009: 詳細カード共通コンポーネント（FR-034〜FR-035）

**親REQ**: REQ-001
**FR**:
- FR-034: カードUIコンポーネント実装（Docs/Tree共通）
- FR-035: カード表示データモデル

**ステータス**: 実装済み

#### FEAT-010: ドキュメントツリー表示（FR-036〜FR-037）

**親REQ**: REQ-001
**FR**:
- FR-036: DAG構築アルゴリズム（Upstream/Downstreamリンクからグラフ構築）
- FR-037: ツリー再帰レンダリング（DAGをツリー構造でDOM生成）

**ステータス**: 実装済み

#### FEAT-011: オーファン検出（FR-038〜FR-039）

**親REQ**: REQ-001
**FR**:
- FR-038: オーファン検出アルゴリズム
- FR-039: オーファンリスト表示UI

**ステータス**: 実装済み

#### FEAT-012: ドキュメント詳細表示（FR-040〜FR-041）

**親REQ**: REQ-001
**FR**:
- FR-040: メタデータ表示機能（YAMLフロントマター表示）
- FR-041: 関連リンク表示機能（上位/下位リンクジャンプ）

**ステータス**: 実装済み

#### FEAT-013: ツリーノード操作（FR-042〜FR-043）

**親REQ**: REQ-001
**FR**:
- FR-042: ノードクリック処理
- FR-043: ノード展開・折りたたみ処理

**ステータス**: 実装済み

### 1.7 FEAT-014: FEAT横断検索（FR-044〜FR-046）

**親REQ**: REQ-001
**優先度**: Medium
**ステータス**: 計画中

#### FR-044: FEAT-ID検索機能

**技術要件**: FEAT-IDによる全文検索とセクション抽出
**実装方針**: 全ドキュメントスキャン、FEAT-ID文字列マッチング、該当セクション抽出
**ステータス**: 未実装

#### FR-045: レイヤー別統合表示

**技術要件**: PRD/UX/API/DATA/QA層の統合表示
**実装方針**: レイヤー別にグルーピング、各セクションに元ドキュメントリンク
**ステータス**: 未実装

#### FR-046: クリップボードコピー機能

**技術要件**: 統合情報のMarkdownコピー
**実装方針**: Electron clipboard API、Markdown形式整形
**ステータス**: 未実装

### 1.8 FEAT-015: プロンプト生成補助（FR-047〜FR-049）

**親REQ**: REQ-002
**優先度**: High
**ステータス**: 実装中

#### FR-047: タスクベースプロンプト生成

**技術要件**: タスク情報からMECE分解プロンプト生成
**実装方針**: Task情報 + context.mdc + Features Registry → プロンプト文字列
**ステータス**: 実装済み

#### FR-048: ドキュメントベースプロンプト生成

**技術要件**: ドキュメント編集・整備プロンプト生成
**実装方針**: 章番号整備、目次追加、Breadcrumbs修正など
**ステータス**: 実装中

#### FR-049: バリデーション違反ベースプロンプト生成

**技術要件**: Quality Gates違反修正プロンプト生成
**実装方針**: 違反内容 → 修正方法 + 正しい記述例
**ステータス**: 実装中

### 1.9 FEAT-021〜FEAT-023: 未実装高優先度機能

#### FEAT-021: ドキュメントビューア（FR-050〜FR-051）

**親REQ**: REQ-001
**FR**:
- FR-050: モーダルドキュメントビューア（アプリ内モーダル表示）
- FR-051: Markdownレンダリング機能（HTML変換と表示）

**実装方針**: Electron BrowserViewまたはiframe、remark-html利用
**ステータス**: 未実装

#### FEAT-022: ドキュメント編集機能（FR-052〜FR-054）

**親REQ**: REQ-001
**FR**:
- FR-052: ドキュメント編集UI（テキストエディタ + プレビュー）
- FR-053: ドキュメント保存機能（IPC経由ファイル保存）
- FR-054: 編集履歴管理（差分記録）

**実装方針**: CodeMirrorまたはMonaco Editor、IPC経由保存
**ステータス**: 未実装

#### FEAT-023: 修正プロンプト生成（FR-055〜FR-056）

**親REQ**: REQ-003
**FR**:
- FR-055: Quality Gate違反プロンプト生成
- FR-056: プロンプトテンプレート管理（違反種別ごと）

**実装方針**: 違反情報 → prompts.jsonテンプレート選択 → プロンプト生成
**ステータス**: 未実装

---

## 2. 非機能要件の技術的実現方針

### 2.1 NFR-01: ローカル運用

#### 技術要件

- 外部API: 不使用
- データソース: ローカルファイル
- ネットワーク: 不要

#### 実装方針

- Node.js fsモジュールでファイルI/O
- 外部HTTP呼び出しなし
- Electron標準機能のみ使用

### 2.2 NFR-02: 軽量性

#### 技術要件

- 起動時間: <3秒
- メモリ使用: <200MB
- ビルドサイズ: 最小限

#### 実装方針

- Electron軽量設定
- TypeScriptコンパイル最適化
- 不要な依存関係を削除

### 2.3 NFR-03: 拡張性

#### 技術要件

- プラグインアーキテクチャ
- 設定ファイルベース
- モジュール化

#### 実装方針（将来）

- プラグインローダー
- 設定ファイル（.nexus/config.json）
- インターフェース定義

---

## 3. 技術スタック選定理由

### 3.1 Electron

理由:
- デスクトップアプリとして完結
- Node.jsアクセス可能
- クロスプラットフォーム

### 3.2 TypeScript

理由:
- 型安全性
- 事前エラー検出
- リファクタリング容易

### 3.3 Playwright

理由:
- E2Eテスト自動化
- CDP経由での操作
- スクリーンショット取得

---

## 4. 技術制約

### 4.1 Electronの制約

- ブラウザ機能の制限
- メモリ使用量
- ファイルアクセス権限

### 4.2 ローカル完結の制約

- 外部API利用不可
- クラウド連携不可
- リアルタイム同期不可

### 4.3 セキュリティの制約

- contextIsolation必須
- nodeIntegration無効化
- リポジトリ外アクセス禁止

---

## 5. データ要件

### 5.1 データモデル

#### ドキュメントメタデータ（Breadcrumbs）

- フォーマット: Markdown（.mdc）
- 構造:
  - Layer: 8種類（STRATEGY, PRD, UX, API, DATA, ARCH, DEVELOPMENT, QA）
  - Upstream: 上位ドキュメントのパス（カンマ区切り）
  - Downstream: 下位ドキュメントのパス（カンマ区切り）
- 保存場所: 各ドキュメントファイル内

#### Tasks（tasks.json）

- フォーマット: JSON
- スキーマ: id, title, category, priority, status, featId, notes, breakdownPrompt, breakdownStatus, lastBreakdownAt, links
- 保存場所: tasks.json

#### プロンプト辞書（prompts.json）

- フォーマット: JSON
- 構造: 再利用可能なプロンプトパーツ
- 保存場所: prompts.json（予定）

### 5.2 データフロー

- context.mdc → Docs Navigator（解析・表示）
- tasks.json ↔ Tasks UI（読み書き）
- Breadcrumbs → DAG構築（Tree表示）
- Quality Gates結果 → UI表示・出力

---

## 6. インターフェース要件

### 6.1 ファイルシステムインターフェース

- 読み込み: .mdcファイル、tasks.json、prompts.json
- 書き込み: tasks.json、prompts.json
- パス解決: リポジトリルートからの相対パス

### 6.2 IPC（Inter-Process Communication）

- Main Process ↔ Renderer Process
- API: window.docs.read(), window.docs.open()
- API: window.tasks.readJson(), window.tasks.writeJson()
- API: window.settings.getProjectRoot(), window.settings.setProjectRoot()

### 6.3 システムコール

- fs.readFileSync(): ファイル読み込み
- fs.writeFileSync(): ファイル書き込み

---

## 7. 運用・保守計画

### 7.1 開発環境

- ローカル完結（Electron開発モード）
- デバッグツール: DevTools（自動起動）
- コンテキスト切替: Repo / Nexus（デバッグ時のみ）

### 7.2 ビルド・デプロイ

- ビルド: `npm run build`（TypeScript → dist/）
- 実行: `npm start`（開発モード）
- リリース: Electronパッケージング（予定）

### 7.3 バージョン管理

- Gitで管理
- 変更履歴: commit messageで記録
- バックアップ: git pushで手動

### 7.4 障害対応

- エラー監視: console.log, DevTools
- ロールバック: Gitで復元
- データ復旧: tasks.jsonをgit checkout

---

## 8. リスク管理

### 8.1 技術的リスク

- Electronメモリ使用量増加
  - 対策: 仮想スクロール、遅延読み込み
- TypeScriptコンパイルエラー
  - 対策: 事前チェック、型定義の整備

### 8.2 運用リスク

- tasks.jsonの破損
  - 対策: Gitでバックアップ
- ドキュメントの不整合
  - 対策: Quality Gatesで自動検証

### 8.3 セキュリティリスク

- リポジトリ外アクセス
  - 対策: パス検証の実装
- 不正なファイルI/O
  - 対策: IPCで制限、contextIsolation

---

## 次のステップ

このシステム要件定義書を元に、詳細なアーキテクチャ設計（ARCH/システム構成.mdc等）に進みます。

関連文書:
- PRD/PRD_Requirements.mdc: 要件定義
- ARCH/システム概要.mdc: アーキテクチャ概要
- ARCH/システム構成.mdc: システム構成
