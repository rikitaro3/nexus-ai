---
title: "技術選定"
layer: "ARCH"
template: "legacy-import"
upstream:
  - "docs/ARCH/index.mdc"
downstream: []
tags: []
---

# 技術選定

> Breadcrumbs
> Layer: ARCH
> Upstream: docs/ARCH/index.mdc
> Downstream: N/A

## 要求の整理

### 核心要求

1. **ドキュメントトレーサビリティ**
   - 小分けドキュメントの自動管理
   - 双方向リンク維持（Upstream/Downstream）
   - DAG 構造の可視化

2. **タスク分解支援**
   - AI 連携を想定したプロンプト生成
   - タスク CRUD / スコアリング
   - 品質ゲート検証との統合

3. **運用要件**
   - ローカル or 社内ネットワークで完結
   - Web ブラウザからアクセスできる UI
   - 既存ドキュメント資産（Markdown）との連携

## 技術選定の観点

| 観点 | 説明 |
|------|------|
| UI | ドキュメントやタスクを快適に扱えるモダンな UI/UX |
| データアクセス | ローカルファイルの読み取り、および API 化の柔軟性 |
| 拡張性 | AI 連携やプラグイン的な拡張のしやすさ |
| 運用負荷 | ビルド・デプロイ・テストフローの容易さ |
| エコシステム | ライブラリ、ドキュメント、周辺ツールの充実度 |

## 候補技術比較

### パターン A: Next.js + TypeScript（Web アプリ）

**メリット**
- React 18 + App Router による最新のサーバーコンポーネント体験
- Node.js ランタイムでファイルシステムアクセスが可能（Route Handler や Server Component）
- Vercel / 社内サーバーどちらでもデプロイが容易
- 充実したエコシステム（UI ライブラリ、テスト、Lint）
- CSR/SSR/SSG の柔軟な組み合わせ

**懸念と対策**
- ローカルファイルアクセス: Route Handler で `fs` を利用し、アクセス制御を `src/lib/` に集約
- オフライン要件: Static Export は要件的に完全には適合しないが、社内ネットワーク配布でカバー
- 既存 Electron 資産: UI コンポーネントを React ベースに再利用し、Node スクリプトは scripts/ として残置

### パターン B: Electron + TypeScript（従来案）

**メリット**
- ローカル完結が容易
- デスクトップ機能（ファイルダイアログ等）が利用可能

**デメリット**
- メモリ消費・バイナリサイズが大きい
- Web ブラウザ共有が困難（配布コスト増）
- サーバーコンポーネントや最新 React 機能を活かしづらい

### パターン C: Tauri + Rust/TypeScript

**メリット**
- 軽量・高速
- ネイティブ API へのアクセスが容易

**デメリット**
- Rust との二言語開発が必要
- 学習コスト・採用例が Electron/Next.js に比べ少ない

### パターン D: 純粋 PWA（静的ホスティング）

**メリット**
- 配布が最も容易
- コストが低い

**デメリット**
- ファイルシステムアクセスが制限される
- オフラインでの品質ゲート実行が難しい

## 推奨: Next.js + TypeScript

### 選定根拠

1. **Web / デスクトップ双方の要件バランス**
   - 社内ポータルとしてブラウザ提供が容易
   - Node.js 実行環境を用意できればローカルホストでも運用可能

2. **アーキテクチャ整合**
   - `src/app/(routes)` によるページ構成でドキュメント・タスク UI を分離
   - `src/lib/` にローカルファイルアクセスや品質ゲート連携を集約し、Route Handler から再利用
   - Server Components + Client Components の分離がドメイン分割と一致

3. **開発体験**
   - TypeScript / ESLint / Jest / Playwright など Next.js 推奨ツールをそのまま活用
   - ホットリロード (next dev) によりドキュメント UI の調整が高速

4. **運用性**
   - `next build` → `next start` のスタンドアロン実行で社内サーバーにデプロイ可能
   - Docker 化も容易（Node.js ベース）
   - CI で `npm run lint` `npm test` を標準実行

### 移行方針

1. UI 層を React/Next.js コンポーネントへ移植
2. ファイルシステムアクセス・品質ゲート連携は `src/lib/` に整理
3. Electron 固有の IPC 依存を排除し、Route Handler / Server Component 経由でデータ提供
4. CLI スクリプトは Node.js 単体で維持し、Next.js とは疎結合に保つ

### 今後の拡張

- Server Actions を活用したフォーム送信・設定更新のサーバーサイド処理
- Incremental Static Regeneration による軽量化
- Playwright を用いた Next.js サーバーへの E2E 自動化
- AI 連携 API (OpenAI 等) を Route Handler で追加する設計拡張

## まとめ

Next.js + TypeScript を正式な採用技術とし、ブラウザベースでの提供と Node.js によるドキュメント資産連携を両立させる。従来の Electron 資産は参考実装として残しつつ、今後の開発・運用は Next.js を中心に進める。
