---
title: "システム構成"
layer: "ARCH"
template: "legacy-import"
upstream:
  - "docs/ARCH/index.mdc"
downstream:
  - "docs/ARCH/セキュリティ設計.mdc"
  - "docs/ARCH/共通コンポーネント設計.mdc"
tags: []
---

# システム構成

> Breadcrumbs
> Layer: ARCH
> Upstream: docs/ARCH/index.mdc
> Downstream: docs/ARCH/セキュリティ設計.mdc, docs/ARCH/共通コンポーネント設計.mdc

## 目次

- [1. システム概要](#1-システム概要)
  - [1.1 ランタイム構成](#11-ランタイム構成)
  - [1.2 技術スタック](#12-技術スタック)
- [2. Next.js アプリ構造](#2-nextjs-アプリ構造)
  - [2.1 App Router](#21-app-router)
  - [2.2 API Routes](#22-api-routes)
  - [2.3 ドメインコンポーネント](#23-ドメインコンポーネント)
- [3. ディレクトリ構成](#3-ディレクトリ構成)
  - [3.1 推奨構造](#31-推奨構造)
  - [3.2 ディレクトリ説明](#32-ディレクトリ説明)
- [4. 外部連携](#4-外部連携)
  - [4.1 ドキュメント資産](#41-ドキュメント資産)
  - [4.2 CLI スクリプト](#42-cli-スクリプト)

---

## 1. システム概要

Nexus は Next.js をベースとした Web アプリケーションです。App Router により UI を構成し、ドキュメント・タスクなどのデータはサーバーコンポーネントおよび Route Handler を介して取得します。アプリは Node.js 上でサーバーレンダリングされ、ブラウザに対して React コンポーネントをストリーミングします。

### 1.1 ランタイム構成

1. **Next.js Server (Node.js)**: サーバーコンポーネントのレンダリング、API Route の実行、環境変数の管理を担います。
2. **Browser (React 18)**: クライアントコンポーネントで対話 UI を提供し、データフェッチ結果を描画します。
3. **CLI/バッチ (Node.js Scripts)**: 品質ゲート検証やテンプレート生成などの補助タスクを提供します。

### 1.2 技術スタック

- Next.js 14 (App Router)
- React 18 / TypeScript
- Jest (ユニットテスト)
- Playwright (E2E 自動化予定)
- Zod によるスキーマ検証

## 2. Next.js アプリ構造

### 2.1 App Router

`src/app/(routes)` でページとレイアウトを定義します。最上位の `layout.tsx` がグローバルな HTML スケルトンを提供し、`page.tsx` がドキュメントナビゲーションとタスク管理の複合ビューを描画します。App Router を採用することで以下を実現します。

- サーバーコンポーネントによる初期データ取得と SEO 向上
- クライアントコンポーネント（DocsNavigator, TasksWorkspace など）を必要箇所に限定
- ルートごとのサーバーアクション導入余地を確保

### 2.2 API Routes

`src/app/api/**/route.ts` に Next.js Route Handler を配置し、ヘルスチェックや将来的なデータフェッチ API のエントリーポイントを提供します。Route Handler は Next.js の標準 Response API を返し、ドメインロジックは `src/lib/` へ集約します。

### 2.3 ドメインコンポーネント

- `src/components/docs/DocsNavigator.tsx`: ドキュメントカテゴリ、FEAT クロスリファレンス、ツリー表示を提供
- `src/components/tasks/TasksWorkspace.tsx`: タスク CRUD、フィルタリング、エクスポート UI
- `src/components/settings/SettingsPanel.tsx`: プロジェクト設定や品質ゲートトグル等の UI
- `src/components/layout/`: Header / Footer / MainLayout など共通レイアウト

各コンポーネントは `src/lib/` のサービス層を通じてドキュメントデータやタスクデータにアクセスします。Zod スキーマでバリデーションを行い、サーバー／クライアントの境界で型安全性を維持します。

## 3. ディレクトリ構成

### 3.1 推奨構造

```
src/
├── app/
│   ├── (routes)/             # App Router のページとレイアウト
│   ├── api/                  # Route Handlers
│   └── globals.css           # グローバルスタイル
├── components/
│   ├── layout/               # レイアウトコンポーネント
│   ├── docs/                 # Docs Navigator UI
│   ├── tasks/                # Tasks Workspace UI
│   └── ui/                   # ボタンなどの汎用 UI
├── lib/                      # ドメインサービス・ユーティリティ
├── config/                   # 設定およびデータ取得ラッパー
├── styles/                   # 共有スタイル（CSS Modules 等）
└── types/                    # 型定義
public/                       # アセット (context.mdc など)
docs/                         # ドキュメント
scripts/                      # CLI スクリプト
```

### 3.2 ディレクトリ説明

- **src/app/**: Next.js App Router エントリーポイント。`layout.tsx` で HTML 構造、`(routes)` 以下でページを定義。
- **src/components/**: ドメイン別の React コンポーネント群。UI の再利用性と責務分離を意識する。
- **src/lib/**: ファイル読み書き、タスクデータ操作、品質ゲート連携などのビジネスロジック。
- **src/config/**: 環境設定やパス解決などの設定値を提供。
- **src/styles/**: CSS Modules や共通スタイルを格納。`app/globals.css` 以外のスタイルを管理。
- **src/types/**: API レスポンスやドメインデータの TypeScript 型定義。
- **public/**: ブラウザから直接取得する静的アセット。
- **docs/**: プロジェクト全体の仕様・設計ドキュメント。
- **scripts/**: Node.js ベースの CLI スクリプト。Next.js とは独立したユースケースを担う。

## 4. 外部連携

### 4.1 ドキュメント資産

`public/context.mdc` および `docs/` 配下のマークダウンドキュメントを Next.js アプリから読み込み、Docs Navigator で参照できるようにします。ファイルシステムアクセスはサーバーコンポーネント／API Routes 経由で行い、ブラウザへは安全な JSON として返却します。

### 4.2 CLI スクリプト

`node scripts/*.js` で提供される品質ゲートやテンプレート生成スクリプトは Next.js アプリとは別プロセスで実行します。これにより Web レイヤーのデプロイとは切り離してドキュメント資産の整合性を確保できます。
