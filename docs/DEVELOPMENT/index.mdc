---
title: "Nexus Development Guide"
layer: "DEVELOPMENT"
template: "legacy-import"
upstream:
  - "docs/ARCH/index.mdc"
downstream:
  - "docs/DEVELOPMENT/Rendererドメインサービス設計.mdc"
tags: []
---

# Nexus Development Guide

> Breadcrumbs
> Layer: DEVELOPMENT
> Upstream: docs/ARCH/index.mdc
> Downstream: docs/DEVELOPMENT/Rendererドメインサービス設計.mdc

## 目的
Nexusの実装構成・開発規約・ビルド/テスト手順をTypeScript版コードベースに合わせて最新化します。

## 1. ディレクトリ構成
```
src/
├── main/                # Electron Main Process (TypeScript)
│   ├── handlers/        # セキュリティ/設定などのIPCロジック
│   ├── utils/           # Quality Gates, impact解析, ロガー
│   └── watchers/        # Quality Gatesパイプライン監視 (rules-watcher)
├── preload/             # contextBridge公開API（TypeScript）
├── renderer/            # ブラウザサイド実装（Vanilla JS + DOM）
│   ├── features/        # docs-navigator / tasks / settings モジュール
│   ├── services/        # AIプロバイダー登録・永続化ラッパー
│   └── shared/          # UIユーティリティ・定数
└── types/               # Main/Renderer共通で参照する型定義
```
補助ファイル:
- `context.mdc` / `prompts.json` … 初期データ
- `logs/quality-gates` … Quality Gates実行ログ
- `scripts/` … ビルド・検証コマンド

## 2. メインプロセス実装方針
- `src/main/main.ts`
  - アプリ起動・BrowserWindow生成
  - `rules-watcher`初期化結果をRendererへブロードキャスト
  - Settings IPC（プロジェクトルート、AIプロバイダー）を管理
- `src/main/watchers/rules-watcher.ts`
  - chokidarで`docs/**`を監視し、差分 → Quality Gates再実行
  - パイプライン状態（auto/semiAuto/manual）と最新ログをイベント化
  - 詳細: [QualityGatesパイプライン詳細設計.mdc](../QA/QualityGatesパイプライン詳細設計.mdc)
- `src/main/handlers/security.ts`
  - パス検証とホワイトリスト判定を共通化
  - Settingsからのプロジェクトルート変更を受け付け
  - 詳細: [セキュリティ設計.mdc](../ARCH/セキュリティ設計.mdc)

## 3. Preload/APIレイヤー
- `src/preload/preload.ts`
  - `contextBridge.exposeInMainWorld`でMain APIを公開
  - `rulesWatcher` APIは `RulesWatcherEventEnvelope` を返却（共通型: `src/types/rules-watcher.ts`）
  - 例外はすべて `{ success: false, error }` 形式に統一
- IPC命名規約: `<ドメイン>:<動詞>`（例: `tasks:writeJson`, `rules:scanImpacts`）

## 4. Renderer実装概要
- 詳細仕様は [Rendererドメインサービス設計.mdc](Rendererドメインサービス設計.mdc)
- `features/docs-navigator/`
  - Docs/FEAT/Treeモード切替
  - Quality Gatesパネル描画（rulesWatcherイベント連携）
  - `localStorage`キー: `nexus.docs.mode`
- `features/tasks/`
  - タスクCRUD + 推奨タスクスコアリング + Breakdownプロンプト生成
  - `localStorage`キー: `nexus.tasks.filter`, `nexus.tasks.category`
  - AIプロバイダーは `services/ai/registry.js` で取得
- `services/ai/`
  - `registry.js` … AIプロバイダーの登録・選択・トークン使用記録
  - `providers/` … 既定プロバイダー（Cursorなど）
  - 拡張手順: [AIプロバイダー拡張ガイド.mdc](AIプロバイダー拡張ガイド.mdc)

## 5. コーディング規約
### TypeScript (Main/Preload)
- `strict`モード有効 (`tsconfig.json`)
- importはESModule形式（拡張子なし）
- IPCレスポンスは `{ success, data?, error? }`
- 例外ログは `logger.error` で構造化出力

### Renderer (Vanilla JS)
- 即時関数でスコープ封じ込め (IIFE)
- `console`ログは`[モジュール名]`プレフィックス
- DOM取得は`document.getElementById/querySelector`
- 状態はモジュールローカル変数と`localStorage`に保持
- AI連携時は `registry.recordTokenUsage()` で消費量を記録

## 6. ビルド & 実行
| コマンド | 目的 |
|----------|------|
| `npm run build` | TypeScriptコンパイル (dist出力) |
| `npm start` | 開発モードでElectron起動（ts-node/register） |
| `npm run lint` | ESLintチェック |
| `npm test` | Jest + Integrationテスト |
| `npm run test:e2e` | Playwright E2E |

## 7. テスト指針
- Quality Gates監視の統合テスト: `test/integration/rules-watcher.integration.spec.ts`
- セキュリティ検証: `test/integration/security.integration.spec.ts`
- RendererロジックはJestモックで主要ユーティリティを検証
- QA観点は [docs/QA/index.mdc](../QA/index.mdc) を参照

## 8. 関連詳細設計
- [QualityGatesパイプライン詳細設計.mdc](../QA/QualityGatesパイプライン詳細設計.mdc)
- [Rendererドメインサービス設計.mdc](Rendererドメインサービス設計.mdc)
- [AIプロバイダー拡張ガイド.mdc](AIプロバイダー拡張ガイド.mdc)
- [セキュリティ設計.mdc](../ARCH/セキュリティ設計.mdc)
- [IPC設計.mdc](../ARCH/IPC設計.mdc)
