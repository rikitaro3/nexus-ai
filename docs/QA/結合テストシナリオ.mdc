---
title: "結合テストシナリオ集"
layer: "QA"
template: "legacy-import"
upstream: []
downstream: []
tags: []
---

# 結合テストシナリオ集

Nexusの監視・品質ゲート機構は複数のモジュールが連携することで成立している。本書では、テスト自動化の観点から優先的に整備すべき結合テストシナリオを整理する。

## RulesWatcherControllerの監視フロー
- **目的**: Markdownルールの更新がファイルウォッチャー → 差分集計 → 品質ゲート再実行 → 通知 という一連の流れで正しく処理されるかを検証する。
- **入力データ**: `test/fixtures/validate-docs-gates/project` をテンプレートとして一時ディレクトリに複製し、`docs/GATES/document.mdc` を実際に編集する。
- **手順**:
  1. `createRulesWatcher` で実際の `chokidar` ウォッチャーを立ち上げる。
  2. 監視対象のMarkdownに見出しを追加する変更を書き込み、ウォッチャーの自動実行を待つ。
  3. `notify` に渡される `RulesWatcherEvent` を取得する。
- **確認ポイント**:
  - `rulesDiff.files` に変更対象ファイルが含まれ、`addedHeadings` に新しい見出しが記録されていること。
  - `pipeline.lastRun.summary` が `summarizeGateResults` の集計結果を反映していること。
  - `runQualityGatesValidation` が自動モードで呼び出されていること。

## 品質ゲートユーティリティの統合確認
- **目的**: `scanQualityGateImpacts` と `summarizeGateResults` が実データに対して整合した出力を生成することを検証する。
- **入力データ**: 上記と同じプロジェクトフィクスチャを使用し、`context.mdc` のコンテキストマップから導出されるドキュメント群を読み取る。
- **手順**:
  1. プロジェクトフィクスチャを読み込み `scanQualityGateImpacts` を実行する。
  2. 返却された `documents` の件数・カテゴリ集計が期待通りであるかを確認する。
  3. 擬似的な品質ゲート結果を `summarizeGateResults` に渡し、重大度ごとの件数が正しく集計されることを検証する。
- **確認ポイント**:
  - `ImpactScanResult.summary.total` がコンテキストに記載された文書数と一致すること。
  - カテゴリ別件数や警告が正しく算出されていること。
  - `summarizeGateResults` が品質ゲートIDのソート規則に従って結果を返すこと。

## IPCハンドラーとセキュリティラッパーの連携
- **目的**: `withPathValidation` が `RulesWatcherController` などのIPCハンドラー処理と連携し、安全なパスのみを通過させることを検証する。
- **入力データ**: プロジェクトフィクスチャと `context.mdc`。環境変数 `NEXUS_PROJECT_ROOT` をテスト用ディレクトリに設定する。
- **手順**:
  1. `createRulesWatcher` を生成し、`withPathValidation` で `setContextPath` を呼び出すハンドラーを定義する。
  2. `context.mdc` への相対パスを渡し、検証済みの絶対パスが `RulesWatcherController` に引き渡されることを確認する。
  3. ディレクトリトラバーサルを含む不正なパスを入力し、`SecurityError` が発生することを確認する。
- **確認ポイント**:
  - 成功ケースでは `RulesWatcherEvent` が返り、`notify` にも同一イベントが届くこと。
  - 失敗ケースでは `createSecurityError` による `SecurityError` が投げられ、処理が中断されること。

これらのシナリオを自動テストとして整備することで、既存のユニットテストでは検知しづらいモジュール間の連携不具合を早期に発見できる。
