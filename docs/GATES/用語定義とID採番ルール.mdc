---
title: "用語定義とID採番ルール"
layer: "QA"
template: "legacy-import"
upstream:
  - "docs/GATES/index.mdc"
downstream:
  - "docs/GATES/ドキュメント品質ゲート.mdc"
  - "docs/GATES/スクリプトレジストリ.mdc"
tags: ["terminology", "architecture", "quality-gates", "governance"]
---

# 用語定義とID採番ルール

> Breadcrumbs
> Layer: QA
> Upstream: docs/GATES/index.mdc
> Downstream: docs/GATES/ドキュメント品質ゲート.mdc, docs/GATES/スクリプトレジストリ.mdc

## 0. はじめに

### 0.1 位置づけと目的

本ドキュメントは、Nexusプロジェクトにおける品質管理とタスク実行の基礎となる用語と概念の階層構造、およびID採番体系を定義します。Quality Gate、Script、Prompt、Taskなどの用語が曖昧に使われていた状態を整理し、明確な定義と関係性を確立することで、以下を実現します：

- チーム内のコミュニケーションの明確化
- 新規メンバーの理解促進
- 品質基準の体系的な管理
- 実装とドキュメントの一貫性確保
- トレーサビリティの確保と変更管理の効率化

### 0.2 参照すべき関連ドキュメント

- `docs/GATES/index.mdc`: Quality Gates一覧
- `docs/GATES/ドキュメント品質ゲート.mdc`: ドキュメント品質基準
- `docs/GATES/スクリプトレジストリ.mdc`: スクリプトレジストリ
- `docs/PRD/ドキュメントテンプレート仕様.mdc`: ドキュメントテンプレート定義
- `docs/PRD/index.mdc`: Features Registry

## 目次

- [用語定義とID採番ルール](#用語定義とid採番ルール)
  - [0. はじめに](#0-はじめに)
    - [0.1 位置づけと目的](#01-位置づけと目的)
    - [0.2 参照すべき関連ドキュメント](#02-参照すべき関連ドキュメント)
  - [目次](#目次)
  - [1. スコープ](#1-スコープ)
    - [1.1 扱う内容](#11-扱う内容)
    - [1.2 扱わない内容（非スコープ）](#12-扱わない内容非スコープ)
  - [2. 用語定義](#2-用語定義)
    - [2.1 Quality Gate（品質ゲート）](#21-quality-gate品質ゲート)
    - [2.2 Script（スクリプト）](#22-scriptスクリプト)
    - [2.3 Prompt（プロンプト）](#23-promptプロンプト)
    - [2.4 Task（タスク）](#24-taskタスク)
    - [2.5 docナンバー](#25-docナンバー)
    - [2.6 Validation（バリデーション）](#26-validationバリデーション)
    - [2.7 Requirement（要求仕様）](#27-requirement要求仕様)
    - [2.8 Activity（アクティビティ）](#28-activityアクティビティ)
    - [2.9 Taskとの区別](#29-taskとの区別)
  - [3. 階層構造](#3-階層構造)
    - [3.1 概念層と実行層](#31-概念層と実行層)
    - [3.2 Quality Gateの構成](#32-quality-gateの構成)
    - [3.3 Activityの構成](#33-activityの構成)
    - [3.4 5層階層構造](#34-5層階層構造)
    - [3.5 ScriptとPromptの使い分け](#35-scriptとpromptの使い分け)
  - [4. 統一採番体系](#4-統一採番体系)
    - [4.1 Requirement ID（要求仕様ID）](#41-requirement-id要求仕様id)
    - [4.2 Feature ID（機能ID）](#42-feature-id機能id)
    - [4.3 Functional/Non-Functional Requirement ID（機能要件・非機能要件ID）](#43-functionalnon-functional-requirement-id機能要件非機能要件id)
    - [4.4 Activity ID（作業単位ID）](#44-activity-id作業単位id)
    - [4.5 Quality Gate ID](#45-quality-gate-id)
    - [4.6 Script ID](#46-script-id)
    - [4.7 Prompt ID](#47-prompt-id)
    - [4.8 ID体系の関係性](#48-id体系の関係性)
    - [4.9 採番フローと管理](#49-採番フローと管理)
      - [4.9.1 新規ID発行の手順](#491-新規id発行の手順)
      - [4.9.2 ID台帳の確認方法](#492-id台帳の確認方法)
      - [4.9.3 欠番の扱い](#493-欠番の扱い)
      - [4.9.4 レビュー基準](#494-レビュー基準)
  - [5. V字モデルとの対応](#5-v字モデルとの対応)
    - [5.1 V字モデルの概念](#51-v字モデルの概念)
    - [5.2 NexusにおけるV字対応](#52-nexusにおけるv字対応)
    - [5.3 実装例：ドキュメント作成Activity](#53-実装例ドキュメント作成activity)
    - [5.4 階層別のV字対応](#54-階層別のv字対応)
    - [5.5 Prompt/Scriptによる効率化](#55-promptscriptによる効率化)
  - [6. 具体例](#6-具体例)
    - [6.1 例1: ドキュメント品質ゲート DOC-001](#61-例1-ドキュメント品質ゲート-doc-001)
    - [6.2 例2: Activity分解プロンプト](#62-例2-activity分解プロンプト)
    - [6.3 例3: 章番号検証と修正](#63-例3-章番号検証と修正)
    - [6.4 例4: FEATからActivityへの分解](#64-例4-featからactivityへの分解)
    - [6.5 例5: Activity実行のフルサイクル](#65-例5-activity実行のフルサイクル)
  - [7. 運用ガイドライン](#7-運用ガイドライン)
    - [7.1 新しいRequirement/Feature/Activity追加時](#71-新しいrequirementfeatureactivity追加時)
    - [7.2 新しいQuality Gate追加時](#72-新しいquality-gate追加時)
    - [7.3 既存QGへのScript/Prompt追加時](#73-既存qgへのscriptprompt追加時)
    - [7.4 命名規則の遵守](#74-命名規則の遵守)
    - [7.5 関連付けのベストプラクティス](#75-関連付けのベストプラクティス)
    - [7.6 Activity管理のベストプラクティス](#76-activity管理のベストプラクティス)
  - [8. その他のID体系](#8-その他のid体系)
    - [8.1 機能関連ID](#81-機能関連id)
    - [8.2 基本原則](#82-基本原則)
  - [alwaysApply: true](#alwaysapply-true)

## 1. スコープ

### 1.1 扱う内容

- Quality Gate、Script、Prompt、Taskの用語定義
- 概念層と実行層の階層構造
- 統一ID採番体系（QG ID、Script ID、Prompt ID）
- QG、Script、Promptの関係性
- V字モデルでの開発⟷検証の対応関係
- 実装とドキュメントの関連付け方法
- ID採番フローと管理方法
- ID台帳の管理とガバナンス

### 1.2 扱わない内容（非スコープ）

- 個別のQuality Gateの詳細仕様（`docs/GATES/ドキュメント品質ゲート.mdc`を参照）
- 具体的なスクリプトの実装方法（`docs/DEVELOPMENT/`を参照）
- プロンプトエンジニアリングの技術詳細
- CI/CDパイプラインの設定方法
- テストフレームワークの選定

## 2. 用語定義

### 2.1 Quality Gate（品質ゲート）

**定義**: ソフトウェア開発において、特定の品質基準を満たしているかを判定する検査ポイント。

**特徴**:
- 概念層に位置する「何を保証するか」の定義
- 複数のScriptとPromptで実現される
- 自動検証と人間の判断を組み合わせる
- 各QGには一意のIDが割り当てられる（例: DOC-01, TC-01）

**例**:
- DOC-01: Breadcrumbsブロック必須
- DOC-05: 章番号必須
- TC-01: テストケース命名規則準拠

**責務**:
- 品質基準の明確な定義
- 検証方法の指針提示
- 合格/不合格の判定基準設定

### 2.2 Script（スクリプト）

**定義**: プログラムによる確定的な処理を行う、実行可能な最小単位。

**特徴**:
- 実行層に位置する「どうやって」の実装
- アウトプットが一意で確定的
- 高速で再現性が高い
- 自動化に適している
- Quality Gateの検証や自動修正を実行

**例**:
- SCR-DOC-01-VAL-01: Breadcrumbs存在チェック関数
- SCR-DOC-05-VAL-01: 章番号検証関数
- SCR-DOC-05-FIX-01: 章番号自動付与関数

**責務**:
- Quality Gateの自動検証
- 機械的に修正可能な違反の自動修正
- 検証結果の構造化された出力

**実装場所**:
- `scripts/validate-*.js`
- `src/main/utils/*.ts`
- `tools/nexus/src/main/utils/*.ts`

### 2.3 Prompt（プロンプト）

**定義**: AIに渡す実行可能な指示の最小単位。

**特徴**:
- 実行層に位置する「どうやって」の実装
- 柔軟でコンテキスト理解が可能
- 人間的な判断を要する処理に適している
- Quality Gateの検証・修正やタスク実行を支援

**例**:
- PRM-DOC-01-FIX-01: Breadcrumbs追加プロンプト
- PRM-DOC-05-FIX-01: 章番号追加プロンプト
- PRM-TASK-BD-01: MECE分解プロンプト

**責務**:
- Quality Gateの柔軟な検証・修正支援
- 開発タスクの実行支援
- コンテキストに応じた適切な処理提案

**実装場所**:
- `prompts.json`
- `tools/nexus/prompts.json`

### 2.4 Task（タスク）

**定義**: Nexusアプリケーションにおける TODO管理機能。

**特徴**:
- アプリケーション層のUI機能（Tasks Workspace）
- タスクの登録・編集・保存・エクスポート
- FEAT-IDとの紐付け
- Breakdownプロンプト生成機能

**注意**: 本ドキュメントでは、開発作業の概念的な単位として「Activity（ACT）」を使用します。Taskはアプリケーション機能の名称として残します。

**関連**: 2.7 Activity、FEAT-0002 Tasks機能

### 2.5 docナンバー

**定義**: Quality GateのID。ドキュメント品質基準を識別する番号。

**形式**: `DOC-XX`（XXは01-99の2桁数字）

**例**:
- DOC-01: Breadcrumbsブロック必須
- DOC-05: 章番号必須

**注意**: docナンバーはQuality Gate IDの一種であり、プロンプトIDやスクリプトIDとは異なる体系です。

### 2.6 Validation（バリデーション）

**定義**: Quality Gateの基準に基づいて検証を実行するプログラム処理の総称。

**特徴**:
- Scriptによって実装される
- 自動的に実行可能
- 構造化された検証結果を出力

**注意**: 「Validation」は実装レベルの用語であり、概念としては「Script」の一種です。本ドキュメントでは「Script」に統一します。

### 2.7 Requirement（要求仕様）

**定義**: プロダクト全体のビジネス要求や戦略的目標を表す最上位の概念。

**特徴**:
- 概念層の最上位に位置する「なぜ作るか」の定義
- ビジネス価値や解決すべき課題を明確化
- 複数のFEAT（機能）に分解される
- プロジェクト全体のスコープを定義

**例**:
- REQ-001: ドキュメント駆動開発の実現
- REQ-002: AIへの指示の定型化・効率化
- REQ-003: AIクオリティゲートウェイ・バリデーション

**責務**:
- ビジネス要求の明確化
- プロダクトビジョンの定義
- 成功指標の設定
- 機能への分解方針

### 2.8 Activity（アクティビティ）

**定義**: 開発プロセスにおける標準化された活動パターン。V字モデルにおける開発側の実行項目の種別。

**特徴**:
- 概念層に位置する「どのような活動をするか」のパターン定義
- 再利用可能な標準活動テンプレート
- 複数のPromptとScriptで支援される
- Quality Gateと対になる（V字モデル）

**例**:
- ACT-001: 要求分解（REQからFEATへ）
- ACT-002: 機能分解（FEATからFRへ）
- ACT-003: 設計書作成
- ACT-010: コンポーネント実装

**責務**:
- 活動パターンの標準化
- 完了基準のテンプレート定義
- 関連QGとの紐付け
- 実行を支援するPrompt/Scriptの特定

**実行支援**:
- Prompt: PRM-ACT-XXX-BD-001（分解）、PRM-ACT-XXX-GEN-001（生成）
- Script: SCR-ACT-XXX-VAL-001（検証）、SCR-ACT-XXX-GEN-001（テンプレート）

**NOTE（旧定義）**:
以前は「1〜3日で完了する具体的な開発作業単位」として定義していました（例: ACT-001: ツリーノード展開機能実装）。
現在は抽象的な活動パターンとして再定義しています。
具体的な作業インスタンス（タスク）はプロジェクト管理ツール（Nexus Tasks機能など）で管理します。

### 2.9 Taskとの区別

Nexusプロジェクトでは「Task」という用語が2つの異なる文脈で使用されます：

| 側面 | Activity（概念） | Tasks（アプリ機能） |
|------|-----------------|-------------------|
| **定義** | V字モデルの開発作業単位 | Nexusの TODO管理機能 |
| **層** | 概念層 | アプリケーション層 |
| **ID** | ACT-XXXX | なし（UI上の管理のみ） |
| **粒度** | 1〜3日 | 可変（ユーザー定義） |
| **用途** | 開発プロセスの体系化 | 日常的なタスク管理 |
| **関連** | QGと対応 | FEAT-IDと紐付け |

**使い分けの原則**:
- ドキュメント・設計で作業体系を語る場合 → **Activity**
- Nexusアプリの機能や画面を指す場合 → **Tasks**
- V字モデルや品質管理を語る場合 → **Activity**

**概念分離のメリット（参考）**:
ゴール指向のタスク（例: インストール数増加）と作業パターンとしてのActivity（例: A/Bテスト実施）を分離すると：
- 再利用可能な活動パターンとして標準化できる
- ビジネス成果と作業進捗を別々に追跡できる
- ゴールに向けて手段を柔軟に組み替えられる
- 組織の知識として蓄積・共有できる

### 2.10 WI（Work Item、作業項目）

**定義**: FR（機能要件）を実装するための具体的な実装タスク。1〜5日で完了できる最小の作業単位。

**特徴**:
- 実行層に位置する「具体的に何をするか」の実装単位
- 1 FR → 2-5 WI に分解
- コード実装、テスト作成、ドキュメント作成などの具体的な作業
- スプリント計画やタスク管理の基本単位
- 各WIには一意のIDが割り当てられる（例: WI-00001）

**例**:
- WI-00001: parseAllBreadcrumbs関数実装
- WI-00002: buildTree関数実装
- WI-00003: ツリーUIコンポーネント実装
- WI-00004: ツリー表示ユニットテスト作成
- WI-00050: Quality Gates検証エンジン実装

**責務**:
- FR要件の具体的な実装
- テストコードの作成
- 技術ドキュメントの作成
- コードレビューとリファクタリング

**WIの種類**:
- **実装系**: 機能実装、アルゴリズム実装、UI実装
- **テスト系**: ユニットテスト、統合テスト、E2Eテスト
- **ドキュメント系**: 設計書作成、API仕様作成、テスト仕様作成
- **インフラ系**: 環境構築、CI/CD設定、デプロイ設定

**階層関係**:
```
REQ (要求仕様) → FEAT (機能) → FR (機能要件) → WI (Work Item)
プロジェクト全体    1〜3ヶ月       1〜2週間           1〜5日
```

## 3. 階層構造

### 3.1 概念層と実行層

```
┌─────────────────────────────────────────────────────────────┐
│ 【概念層】(What - 何を)                                       │
│                                                               │
│ ┌─────────────────┐        ┌─────────────────┐            │
│ │ Quality Gate    │        │ Activity        │            │
│ │ （品質基準）     │  ⟷   │ （作業単位）    │            │
│ │                 │        │                 │            │
│ │ 例: DOC-01      │        │ 例: ツリーノード│            │
│ │     TC-01       │        │     展開機能実装│            │
│ └─────────────────┘        └─────────────────┘            │
│         │                           │                        │
│         │ 実現される                │ 実行される              │
│         ↓                           ↓                        │
└─────────────────────────────────────────────────────────────┘
        │                           │
┌─────────────────────────────────────────────────────────────┐
│ 【実行層】(How - どうやって)                                 │
│                                                               │
│ ┌─────────────────┐        ┌─────────────────┐            │
│ │ Script          │        │ Prompt          │            │
│ │ （確定的処理）   │        │ （柔軟な処理）  │            │
│ │                 │        │                 │            │
│ │ - 検証系        │        │ - 検証・修正系  │            │
│ │ - 自動修正系    │        │ - Activity実行系│            │
│ │                 │        │                 │            │
│ │ 特徴:           │        │ 特徴:           │            │
│ │ - 確定的        │        │ - 柔軟          │            │
│ │ - 高速          │        │ - コンテキスト  │            │
│ │ - 再現性あり    │        │   理解          │            │
│ │ - アウトプット  │        │ - 人間的判断    │            │
│ │   一意          │        │                 │            │
│ └─────────────────┘        └─────────────────┘            │
│                                                               │
└─────────────────────────────────────────────────────────────┘
```

### 3.2 Quality Gateの構成

1つのQuality Gateは、複数のScriptとPromptで構成されます：

```
Quality Gate: DOC-001 (Breadcrumbsブロック必須)
│
├─ Script（確定的処理）
│  └─ SCR-DOC-001-VAL-001: Breadcrumbs存在チェック
│     - 実装: scripts/validate-docs-gates.js
│     - 機能: Breadcrumbsブロックの有無を検証
│     - 出力: { valid: boolean, errors: string[] }
│
└─ Prompt（柔軟な処理）
   └─ PRM-DOC-001-FIX-001: Breadcrumbs追加プロンプト
      - 実装: prompts.json
      - 機能: 適切なBreadcrumbsブロックを生成・追加
      - 出力: 修正されたドキュメント内容
```

### 3.3 Activityの構成

1つのActivityは、複数のScriptとPromptで実行されます：

```
Activity: ドキュメント作成（ACT-001）
│
├─ Script（自動処理）
│  ├─ SCR-ACT-GEN-001: テンプレートからの自動生成
│  └─ SCR-ACT-VAL-001: 基本構造の検証
│
└─ Prompt（AI支援）
   ├─ PRM-ACT-BD-001: ActivityのMECE分解
   ├─ PRM-ACT-GEN-001: コンテンツ生成支援
   └─ PRM-ACT-RD-001: 品質レビュー支援
```

### 3.4 6層階層構造

Nexusプロジェクトでは、要求から実装まで6層の階層構造で管理します：

```
┌─────────────────────────────────────────────────────────────┐
│ REQ-XXX（Requirement：要求仕様）                             │
│ 最上位層 - プロダクト全体のビジネス要求・戦略目標             │
│ 期間：プロジェクト全体                                        │
│ 例：REQ-001 ドキュメント駆動開発の実現                       │
└─────────────────────────────────────────────────────────────┘
                   ↓ 分解される
┌─────────────────────────────────────────────────────────────┐
│ FEAT-XXXX（Feature：機能）                                   │
│ 大粒度 - プロダクトの主要機能                                │
│ 期間：1〜3ヶ月                                               │
│ 例：FEAT-001 Docs Navigator                                 │
└─────────────────────────────────────────────────────────────┘
                   ↓ 分解される
┌─────────────────────────────────────────────────────────────┐
│ FR-XXX / NFR-XXX（Functional/Non-Functional Requirement）    │
│ 中粒度 - 機能要件・非機能要件                                │
│ 期間：1〜2週間                                               │
│ 例：FR-001 ドキュメントツリー表示                            │
└─────────────────────────────────────────────────────────────┘
                   ↓ 分解される
┌─────────────────────────────────────────────────────────────┐
│ WI-XXXXX（Work Item：作業項目）                              │
│ 小粒度 - 具体的な実装タスク                                  │
│ 期間：1〜5日                                                  │
│ 例：WI-00001 parseAllBreadcrumbs関数実装                    │
└─────────────────────────────────────────────────────────────┘
                   ↓ 検証される
┌─────────────────────────────────────────────────────────────┐
│ QG-XXX（Quality Gate：品質ゲート）                           │
│ 品質基準 - 各WIの成果物を検証                               │
│ 例：DOC-001 Breadcrumbsブロック必須                          │
└─────────────────────────────────────────────────────────────┘

【補足】ACT-XXX（Activity：活動パターン）は抽象的な活動種別の定義であり、
        直接的な階層には含まれません。複数のWIをグルーピングする概念です。
```

**階層関係の詳細**:

| 層 | ID形式 | 粒度 | 期間 | 分解比率 | 例 |
|---|--------|------|------|---------|-----|
| Requirement | REQ-XXX | 最大 | プロジェクト全体 | 1 REQ → 3-5 FEAT | REQ-001 |
| Feature | FEAT-XXX | 大 | 1〜3ヶ月 | 1 FEAT → 3-7 FR | FEAT-001 |
| Functional Requirement | FR-XXX, NFR-XXX | 中 | 1〜2週間 | 1 FR → 2-5 WI | FR-001 |
| Work Item | WI-XXXXX | 小 | 1〜5日 | 1 WI → 1-3 QG | WI-00001 |
| Quality Gate | QG-XXX | 検証 | - | - | DOC-001 |
| Activity（参考） | ACT-XXX | 概念 | - | 活動パターン定義 | ACT-001 |

### 3.5 ScriptとPromptの使い分け

| 観点 | Script | Prompt |
|------|--------|--------|
| **処理の性質** | 確定的（入力が同じなら出力も同じ） | 柔軟（コンテキストに応じて変化） |
| **速度** | 高速（ミリ秒オーダー） | 低速（秒オーダー） |
| **コスト** | ほぼゼロ | API呼び出しコスト |
| **適用場面** | 機械的に判定可能な検証・修正 | 文脈理解が必要な検証・修正 |
| **出力** | 構造化データ | 自然言語またはコード |
| **再現性** | 100% | 高いが100%ではない |

**使い分けの基準**:
- 形式的にチェック可能 → Script
- 意味的な理解が必要 → Prompt
- 単純な文字列操作 → Script
- 複雑な構造生成 → Prompt
- 高頻度実行 → Script
- 低頻度・対話的実行 → Prompt

## 4. 統一採番体系

### 4.1 Requirement ID（要求仕様ID）

**形式**: `REQ-[NNN]`

**構成要素**:
1. REQ: Requirementを示す固定プレフィックス（3文字）
2. NNN: 3桁の連番（001-999）、ゼロパディング必須

**用途**:
- プロダクト全体のビジネス要求・戦略目標の識別
- プロジェクトのスコープと方向性の定義
- 複数のFEATへの分解基準

**例**:
- `REQ-001`: ドキュメント駆動開発の実現
- `REQ-002`: AIへの指示の定型化・効率化
- `REQ-003`: AIクオリティゲートウェイ・バリデーション

**採番ルール**:
- 最新番号+1で採番
- 3桁のゼロパディング必須（001, 002, ...）
- 欠番は埋めない（履歴保持のため）
- ビジネス価値の高い順に番号を割り当てることを推奨

### 4.2 Feature ID（機能ID）

**形式**: `FEAT-[NNN]`

**構成要素**:
1. FEAT: Featureを示す固定プレフィックス（4文字）
2. NNN: 3桁の連番（001-999）、ゼロパディング必須

**用途**:
- プロダクトの主要機能の識別
- 1〜3ヶ月規模の開発単位
- REQから分解され、複数のFR/NFRに分解される

**例**:
- `FEAT-001`: Docs Navigator
- `FEAT-002`: Tasks
- `FEAT-003`: Quality Gates

**採番ルール**:
- 実装順に採番（機能優先度順が望ましい）
- 3桁のゼロパディング必須（001, 002, ...）

### 4.3 Functional/Non-Functional Requirement ID（機能要件・非機能要件ID）

**形式**: `FR-[NNN]` または `NFR-[NNN]`

**構成要素**:
1. FR/NFR: 機能要件/非機能要件を示すプレフィックス
2. NNN: 3桁の連番（001-999）、ゼロパディング必須

**用途**:
- 1〜2週間規模の要件定義
- FEATから分解され、複数のACTに分解される

**例**:
- `FR-001`: Docs Navigator（ドキュメント閲覧・ナビゲーション）
- `FR-002`: Tasks（タスク管理・分解支援）
- `NFR-001`: ローカル運用
- `NFR-002`: 軽量性

**採番ルール**:
- FR/NFRそれぞれ独立した連番
- 3桁のゼロパディング必須（001, 002, ...）
- 要求仕様書内での記載順に採番

### 4.4 Activity ID（活動パターンID）

**形式**: `ACT-[NNN]`

**構成要素**:
1. ACT: Activityを示す固定プレフィックス（3文字）
2. NNN: 3桁の連番（001-999）、ゼロパディング必須

**用途**:
- 標準化された活動パターンの識別
- 要求分解、ドキュメント作成、実装、検証などの活動種別
- 再利用可能な活動テンプレートの定義

**例**:
- `ACT-001`: 要求分解（REQからFEATへ）
- `ACT-002`: 機能分解（FEATからFRへ）
- `ACT-010`: 設計書作成
- `ACT-020`: コンポーネント実装

**採番ルール**:
- 定義順の連番（001, 002, 003...）
- 3桁のゼロパディング必須（001, 002, ...）
- 完了基準のテンプレートと関連QGを必ず定義
- カテゴリによる番号区切りなし（Prompt/Scriptのカテゴリで分類）

**関連付け**:
- 対象: REQ/FEAT/FR/NFRなど、活動の入出力
- 子: 実行支援のPrompt/Script（PRM-ACT-XXX-*, SCR-ACT-XXX-*）
- 検証: QG-XXX（Quality Gate）

**NOTE（旧定義）**:
以前は具体的な作業インスタンス（例: ACT-001: ツリーノード展開機能実装）を識別するために使用していました。
現在は抽象的な活動パターンの識別に使用します。

### 4.5 WI（Work Item）ID

**形式**: `WI-[NNNNN]`

**構成要素**:
1. WI: Work Itemを示す固定プレフィックス（2文字）
2. NNNNN: 5桁の連番（00001-99999）、ゼロパディング必須

**用途**:
- FRを実装するための具体的な作業タスクの識別
- 1〜5日規模の実装・テスト・ドキュメント作成タスク
- スプリント計画やタスク管理の基本単位

**例**:
- `WI-00001`: parseAllBreadcrumbs関数実装
- `WI-00002`: buildTree関数実装
- `WI-00003`: ツリーUIコンポーネント実装
- `WI-00004`: ツリー表示ユニットテスト作成
- `WI-00050`: Quality Gates検証エンジン実装

**採番ルール**:
- 全プロジェクト通しての連番（00001, 00002, 00003...）
- 5桁のゼロパディング必須（00001, 00002, ...）
- FR順に採番（FR-001のWI → FR-002のWI → ...）
- 欠番は埋めない（削除されたWIの履歴を残すため）

**WIの種類と命名規則**:
- **実装系**: `[関数名/コンポーネント名]実装`
  - 例: WI-00001: parseAllBreadcrumbs関数実装
- **テスト系**: `[対象]ユニットテスト作成` / `[対象]E2Eテスト作成`
  - 例: WI-00004: ツリー表示ユニットテスト作成
- **ドキュメント系**: `[対象]設計書作成` / `[対象]API仕様作成`
  - 例: WI-00100: Quality Gates設計書作成
- **リファクタリング系**: `[対象]リファクタリング` / `[対象]最適化`
  - 例: WI-00200: DAG構築アルゴリズム最適化

**関連付け**:
- 親: FR-XXX（機能要件）
- 子: 実装ファイル、テストファイル、ドキュメントファイル
- 検証: QG-XXX（Quality Gate）

**管理場所**:
- プロジェクト管理ツール: Nexus Tasks機能、GitHub Issues、Jiraなど
- トレーサビリティマトリクス: システム要件定義書内

### 4.6 Quality Gate ID

**形式**: `[CATEGORY]-[NNN]`

**構成要素**:
1. CATEGORY: 品質カテゴリ（DOC, TC, CODE, API, DATA等）
2. NNN: 3桁の連番（001-999）、ゼロパディング必須

**例**:
- `DOC-001`: ドキュメント品質基準001
- `TC-001`: テストケース品質基準001
- `CODE-001`: コード品質基準001（将来）

**採番ルール**:
- カテゴリごとに独立した連番
- 3桁のゼロパディング必須（001, 002, ...）

### 4.7 Script ID

**形式**: `SCR-[QG_OR_ACT_ID]-[CATEGORY]-[NNN]`

**構成要素**:
1. SCR: Scriptを示す固定プレフィックス（3文字）
2. QG_OR_ACT_ID: 紐づくQGまたはACTのID（完全一致）
3. CATEGORY: アクション分類（VAL, FIX, GEN等）
4. NNN: 3桁の連番（001-999）、ゼロパディング必須

**CATEGORY一覧**:
- `VAL`: Validation（検証）
- `FIX`: Fix（自動修正）
- `GEN`: Generate（生成）
- `CHK`: Check（チェック）

**例**:
- `SCR-DOC-001-VAL-001`: DOC-001の検証スクリプト1番目
- `SCR-DOC-005-VAL-001`: DOC-005の検証スクリプト1番目
- `SCR-DOC-005-FIX-001`: DOC-005の自動修正スクリプト1番目
- `SCR-ACT-GEN-001`: Activity関連の生成スクリプト1番目

**採番ルール**:
- QG/ACTごと、CATEGORYごとに独立した連番
- 3桁のゼロパディング必須（001, 002, ...）

### 4.8 Prompt ID

**形式**: `PRM-[QG_OR_ACT_ID]-[CATEGORY]-[NNN]`

**構成要素**:
1. PRM: Promptを示す固定プレフィックス（3文字）
2. QG_OR_ACT_ID: 紐づくQGまたはACTのID（完全一致）
3. CATEGORY: アクション分類（VAL, FIX, BD, RD, GEN等）
4. NNN: 3桁の連番（001-999）、ゼロパディング必須

**CATEGORY一覧**:
- `VAL`: Validation（検証）
- `FIX`: Fix（修正）
- `BD`: Breakdown（分解）
- `RD`: Review（レビュー）
- `GEN`: Generate（生成）
- `CHK`: Check（チェック）

**例**:
- `PRM-DOC-001-FIX-001`: DOC-001の修正プロンプト1番目
- `PRM-DOC-005-FIX-001`: DOC-005の修正プロンプト1番目
- `PRM-ACT-BD-001`: Activity分解プロンプト1番目
- `PRM-ACT-RD-001`: Activityレビュープロンプト1番目

**採番ルール**:
- QG/ACTごと、CATEGORYごとに独立した連番
- 3桁のゼロパディング必須（001, 002, ...）

### 4.9 ID体系の関係性

```
REQ → FEAT → FR → WI
 ↓       ↓      ↓    ↓
Quality Gate（検証）
 ↓
├─ Script ID（複数）
└─ Prompt ID（複数）

例1: FR-WI-QG関係
FR-001（ドキュメントツリー表示）
├─ WI-00001: parseAllBreadcrumbs関数実装
├─ WI-00002: buildTree関数実装
├─ WI-00003: ツリーUIコンポーネント実装
└─ WI-00004: ツリー表示ユニットテスト作成
    ↓ (検証される)
    QG-DOC-001

例2: QG-Script-Prompt関係
DOC-001
├─ SCR-DOC-001-VAL-001
├─ SCR-DOC-001-VAL-002（将来追加の可能性）
└─ PRM-DOC-001-FIX-001
```

### 4.10 採番フローと管理

#### 4.10.1 新規ID発行の手順

1. **カテゴリの確認**: 対象がどのカテゴリに属するか決定
2. **最新番号の確認**: ID台帳または既存ドキュメントから最新番号を取得
3. **インクリメント**: 最新番号+1を新規IDとして採番
4. **重複チェック**: grepやcodebase searchで重複がないか確認
5. **登録**: ID台帳に登録し、ドキュメントに記載

#### 4.10.2 ID台帳の確認方法

**grepコマンドでの検索**:

```bash
# 特定プレフィックスの全IDを検索
grep -r "DOC-[0-9]\{2\}" docs/

# 最新番号を確認
grep -r "DOC-[0-9]\{2\}" docs/ | sort | tail -n 10

# Script IDの検索
grep -r "SCR-DOC-[0-9]\{2\}-" docs/
```

**ID台帳ファイル**:

| ID種別 | 台帳場所 | 補足 |
|--------|---------|------|
| Quality Gate ID | `docs/GATES/index.mdc` | 全QGの一覧 |
| Script ID | `docs/GATES/スクリプトレジストリ.mdc` | 全Scriptの一覧と実装場所 |
| Prompt ID | `prompts.json` | Promptの定義とメタデータ |
| REQ/FEAT/FR ID | `docs/PRD/index.mdc`, `docs/PRD/システム要件定義書.mdc` | 要求・機能・機能要件 |
| WI ID | `docs/PRD/システム要件定義書.mdc`, Nexus Tasks, GitHub Issues | Work Item一覧とトレーサビリティマトリクス |

#### 4.10.3 欠番の扱い

- **基本方針**: 欠番は埋めない（削除された項目の履歴を残すため）
- **例外**: 採番直後（数分以内）でコミット前の場合のみ、番号の付け直しを許容

#### 4.10.4 レビュー基準

プルリクエストでの確認事項：

- [ ] 新規IDが台帳に登録されているか
- [ ] ID形式がルールに準拠しているか
- [ ] 重複IDが存在しないか
- [ ] 廃止IDの場合、台帳に廃止理由が記録されているか

## 5. V字モデルとの対応

### 5.1 V字モデルの概念

V字モデルでは、開発工程（左側）と検証工程（右側）が対応します：

```
要求定義 ────────────────────→ 受入テスト
   ↓                              ↑
基本設計 ──────────────→ システムテスト
   ↓                        ↑
詳細設計 ────────→ 結合テスト
   ↓                  ↑
 実装  ──→  単体テスト
```

### 5.2 NexusにおけるV字対応

Nexusでは、Activity（開発作業）とQuality Gate（品質基準）が対応します：

```
【開発側（左）】                    【検証側（右）】

REQ: 要求仕様            ⟷    （プロジェクト全体の検証）
  ↓
FEAT: 機能              ⟷    （機能レベルの検証）
  ↓
FR/NFR: 要件            ⟷    （要件レベルの検証）
  ↓
Activity: 作業実行       ⟷    Quality Gate: 品質検証
                              
例:
ACT-001: ドキュメント作成  ⟷  DOC-001: Breadcrumbs必須
ACT-002: 設計書作成       ⟷  DOC-005: 章番号必須
ACT-003: コード実装       ⟷  CODE-001: 命名規則準拠
ACT-004: テスト作成       ⟷  TC-001: テストケース命名規則
```

**Prompt/Scriptの役割**:

```
         【Activity実行】              【Quality Gate検証】
                │                            │
    ┌───────────┴───────────┐    ┌──────────┴──────────┐
    │                       │    │                     │
  Prompt                Script  Script              Prompt
 （柔軟な支援）        （自動化） （自動検証）      （柔軟な修正）
    │                       │    │                     │
    │                       │    │                     │
PRM-ACT-BD-001        SCR-ACT-GEN-001  SCR-DOC-001-VAL-001  PRM-DOC-001-FIX-001
Activity分解          テンプレート生成  Breadcrumbsチェック Breadcrumbs追加
```

### 5.3 実装例：ドキュメント作成Activity

```
開発フェーズ: ドキュメント作成（ACT-001）
├─ Activity実行
│  ├─ PRM-ACT-BD-001: 内容をMECE分解
│  ├─ PRM-ACT-GEN-001: セクション生成
│  └─ SCR-ACT-GEN-001: テンプレート適用
│
検証フェーズ: ドキュメント品質検証
└─ Quality Gate実行
   ├─ SCR-DOC-001-VAL-001: Breadcrumbsチェック
   ├─ SCR-DOC-005-VAL-001: 章番号チェック
   ├─ PRM-DOC-001-FIX-001: Breadcrumbs修正（必要時）
   └─ PRM-DOC-005-FIX-001: 章番号修正（必要時）
```

### 5.4 階層別のV字対応

| 階層 | 開発側 | 検証側 | 関係性 |
|------|--------|--------|--------|
| **最上位** | REQ-XXX（要求仕様） | プロジェクト全体の成功基準 | ビジネス価値の検証 |
| **大** | FEAT-XXX（機能） | 機能レベルの受入基準 | 機能完成度の検証 |
| **中** | FR/NFR-XXX（要件） | 要件レベルの検証基準 | 要件充足の検証 |
| **小** | ACT-XXX（Activity） | QG-XXX（Quality Gate） | 成果物品質の検証 |

### 5.5 Prompt/Scriptによる効率化

**Activityの実行支援**:
- PRM-ACT-BD-001: Activityの分解（大きなActivityを小さく分ける）
- PRM-ACT-GEN-001: Activity実行支援（コード生成、ドキュメント作成支援）
- SCR-ACT-GEN-001: テンプレート自動生成
- SCR-ACT-VAL-001: Activity完了基準の検証

**Quality Gateの検証・修正支援**:
- SCR-[QG]-VAL-XXX: 自動検証（高速・確定的）
- SCR-[QG]-FIX-XXX: 自動修正（機械的に修正可能な違反）
- PRM-[QG]-FIX-XXX: AI支援修正（文脈理解が必要な修正）
- PRM-[QG]-CHK-XXX: AI支援検証（意味的な検証）

## 6. 具体例

### 6.1 例1: ドキュメント品質ゲート DOC-001

**Quality Gate定義**:
- ID: DOC-001
- 名称: Breadcrumbsブロック必須
- 基準: 全ドキュメントにBreadcrumbsブロックが存在すること

**Script実装**:
- ID: SCR-DOC-001-VAL-001
- 実装場所: `scripts/validate-docs-gates.js`
- 処理内容:
  ```javascript
  function validateBreadcrumbs(content) {
    if (!content.includes('> Breadcrumbs')) {
      return { valid: false, error: 'Breadcrumbsブロックが見つかりません' };
    }
    return { valid: true };
  }
  ```

**Prompt実装**:
- ID: PRM-DOC-001-FIX-001
- 実装場所: `prompts.json`
- 処理内容: Breadcrumbsブロックの生成と追加を支援

### 6.2 例2: Activity分解プロンプト

**Activity定義**:
- 作業: 大きなActivityの分解

**Prompt実装**:
- ID: PRM-ACT-BD-001
- カテゴリ: Breakdown
- 処理内容: ActivityをMECE（重複なく漏れなく）に分解

**関連QG**: なし（Activity実行系のため）

### 6.3 例3: 章番号検証と修正

**Quality Gate定義**:
- ID: DOC-005
- 名称: 章番号必須
- 基準: 全ての見出しに章番号が付与されている

**Script実装（検証）**:
- ID: SCR-DOC-005-VAL-001
- 処理内容: 見出しの章番号存在チェック

**Script実装（修正）**:
- ID: SCR-DOC-005-FIX-001
- 処理内容: 連番の自動付与（単純なケース）

**Prompt実装（修正）**:
- ID: PRM-DOC-005-FIX-001
- 処理内容: 文脈を考慮した章番号付与

### 6.4 例4: 階層的な分解フロー

**Requirement（要求仕様）**:
- ID: REQ-001
- 名称: ドキュメント駆動開発の実現
- 期間: プロジェクト全体

↓ 分解される（Activity: ACT-001を適用）

**Feature（機能）**:
- ID: FEAT-001
- 名称: Docs Navigator
- 期間: 1〜3ヶ月

↓ 分解される（Activity: ACT-002を適用）

**Functional Requirement（機能要件）**:
- ID: FR-001
- 名称: ドキュメント閲覧・ナビゲーション
- 期間: 1〜2週間

↓ 実現される（Activity: ACT-010, ACT-020を適用）

**具体的な作業タスク**（Nexus Tasksで管理）:
- ツリーノード展開機能実装（1〜3日）
- Breadcrumbs検証スクリプト実装（1〜3日）
- ドキュメントテンプレート作成（1〜3日）

↓ 検証される

**Quality Gate**:
- ID: DOC-001
- 名称: Breadcrumbsブロック必須

**NOTE**: 
以前はACT-001を「ツリーノード展開機能実装」のような具体的タスクとして定義していましたが、
現在はACT-001を「要求分解（REQからFEATへ）」のような抽象的な活動パターンとして定義しています。

### 6.5 例5: Activity実行のフルサイクル

**シナリオ**: Activity Type「設計書作成」の適用

**Step 1: Activity Type選択**
- Activity: ACT-010（設計書作成）
- 適用対象: FR-003（品質検証機能）
- 完了基準テンプレート:
  - Breadcrumbsブロックが存在する
  - 章番号が全見出しに付与されている
  - 目次が自動生成されている
  - DOC-001〜DOC-009のQG合格

**Step 2: Activity実行（Prompt/Script活用）**
```
1. PRM-ACT-010-BD-001で内容をMECE分解
   入力: 「品質検証機能の設計書を作成」
   出力: セクション構成案（階層化された見出しリスト）

2. SCR-ACT-010-GEN-001でテンプレート適用
   入力: セクション構成
   出力: Breadcrumbs、見出し、目次の雛形

3. PRM-ACT-010-GEN-001で各セクション内容を生成
   入力: セクションタイトルとcontext.mdc
   出力: 各セクションの詳細内容
```

**Step 3: Quality Gate検証**
```
1. SCR-DOC-001-VAL-001: Breadcrumbsチェック
   結果: PASS

2. SCR-DOC-005-VAL-001: 章番号チェック
   結果: FAIL（一部見出しに章番号なし）

3. PRM-DOC-005-FIX-001: 章番号追加
   入力: 検証結果とドキュメント
   出力: 章番号が補完されたドキュメント

4. 再検証
   結果: ALL PASS
```

**Step 4: Activity完了**
- 設計書作成Activityが完了
- 生成されたドキュメントをコミット
- 次のActivityパターン適用へ進む

**NOTE**: 
このシナリオではACT-010という抽象的な活動パターンを、具体的な設計書作成タスクに適用しています。
同じACT-010パターンは他の設計書作成にも再利用できます。

## 7. 運用ガイドライン

### 7.1 新しいRequirement/Feature/Activity追加時

**Requirement（REQ）追加**:
1. ビジネス要求を明確化
2. REQ-XXXを採番（最新番号+1、3桁ゼロパディング）
3. `docs/PRD/index.mdc`に登録
4. 分解予定のFEAT一覧を記載

**Feature（FEAT）追加**:
1. 親REQを特定
2. FEAT-XXXを採番（3桁ゼロパディング）
3. `docs/PRD/index.mdc`のFeatures Registryに登録
4. 分解予定のFR/NFR一覧を記載

**Activity（ACT）追加**:
1. 最新のActivity番号を確認
2. ACT-XXXを採番（最新番号+1、3桁ゼロパディング）
3. 活動パターンの目的・入出力を明確化
4. 完了基準テンプレートを定義
5. 関連QGを特定
6. 実行支援Prompt/Scriptを定義
7. `docs/GATES/Activity一覧.mdc`に登録

### 7.2 新しいQuality Gate追加時

1. Quality Gate定義を作成（`docs/GATES/ドキュメント品質ゲート.mdc`）
2. QG IDを採番（例: DOC-010、3桁ゼロパディング）
3. Script実装を作成
   - 検証Script: SCR-DOC-010-VAL-001
   - 修正Script: SCR-DOC-010-FIX-001（可能な場合）
4. Prompt実装を作成
   - 修正Prompt: PRM-DOC-010-FIX-001
5. スクリプトレジストリに登録（`docs/GATES/スクリプトレジストリ.mdc`）
6. プロンプト辞書に登録（`prompts.json`）

### 7.3 既存QGへのScript/Prompt追加時

1. 既存のScript/Promptを確認
2. 最新の連番を確認（例: 001が使用済みなら002を使用）
3. 新しいIDを採番（3桁ゼロパディング）
   - 例: SCR-DOC-001-VAL-002（2番目の検証スクリプト）
4. 実装とレジストリへの登録

### 7.4 命名規則の遵守

- Requirement ID: 必ず`REQ-[NNN]`形式（3桁）
- Feature ID: 必ず`FEAT-[NNN]`形式（3桁）
- FR/NFR ID: 必ず`FR-[NNN]`または`NFR-[NNN]`形式（3桁）
- Activity ID: 必ず`ACT-[NNN]`形式（3桁）
- Quality Gate ID: 必ず`[CATEGORY]-[NNN]`形式（3桁）
- Script ID: 必ず`SCR-[QG_OR_ACT_ID]-[CATEGORY]-[NNN]`形式（3桁）
- Prompt ID: 必ず`PRM-[QG_OR_ACT_ID]-[CATEGORY]-[NNN]`形式（3桁）
- ハイフン（-）を使用、アンダースコア不可
- 連番は必ず3桁のゼロパディング（001, 002, ...）

### 7.5 関連付けのベストプラクティス

**prompts.jsonでの記述例**:
```json
{
  "id": "PRM-DOC-001-FIX-001",
  "title": "Breadcrumbsブロック追加",
  "relatedGates": ["DOC-001"],
  "relatedScripts": ["SCR-DOC-001-VAL-001"],
  "purpose": "fix",
  "body": "..."
}
```

**scripts-registry.mdcでの記述例**:
```markdown
## SCR-DOC-001-VAL-001

- 名称: Breadcrumbs存在チェック
- 関連QG: DOC-001
- 実装場所: scripts/validate-docs-gates.js
- 関連Prompt: PRM-DOC-001-FIX-001
```

### 7.6 Activity管理のベストプラクティス

**Activity定義時のチェックリスト**:
- [ ] 親FR/NFRが明確か
- [ ] 1〜3日で完了できる粒度か
- [ ] 完了基準が具体的か（測定可能か）
- [ ] 関連QGが特定されているか
- [ ] 実行支援Prompt/Scriptが特定されているか

**Activity実行時のフロー**:
1. Activityの内容を確認
2. 必要に応じてPRM-ACT-BD-01で分解
3. Prompt/Scriptを活用して実行
4. Quality Gateで検証
5. 違反があればPrompt/Scriptで修正
6. 再検証してPASSを確認
7. Activityを完了としてマーク

**Activity完了の判定基準**:
- 完了基準がすべて満たされている
- 関連するQuality GateがすべてPASSしている
- 成果物がコミットされている（必要な場合）
- ドキュメントが更新されている（必要な場合）

## 8. その他のID体系

Nexusプロジェクトでは、Quality Gate関連以外に以下の機能関連IDも使用します：

### 8.1 機能関連ID

| プレフィックス | カテゴリ | 桁数 | 用途 | 期間 | 例 |
|--------------|---------|------|------|------|-----|
| REQ | 要求仕様ID | 3 | ビジネス要求・戦略目標 | プロジェクト全体 | REQ-001 |
| FEAT | 機能ID | 3 | プロジェクト全体の機能識別 | 1〜3ヶ月 | FEAT-001 |
| FR | 機能要件ID | 3 | 要求仕様書の機能要件 | 1〜2週間 | FR-001 |
| NFR | 非機能要件ID | 3 | 要求仕様書の非機能要件 | 1〜2週間 | NFR-001 |
| ACT | Activity ID | 3 | 開発作業単位 | 1〜3日 | ACT-001 |

**管理場所**: 
- REQ, FEAT, FR, NFR: `docs/PRD/index.mdc`
- ACT: Activity管理ツール（将来実装予定）、現在は各ドキュメント内で管理

**階層関係**:
```
REQ-001
  ↓ 分解される
  ├─ FEAT-001
  │   ↓ 分解される
  │   ├─ FR-001
  │   │   ↓ 実現される
  │   │   ├─ ACT-001
  │   │   ├─ ACT-002
  │   │   └─ ACT-003
  │   └─ FR-002
  │       ↓ 実現される
  │       ├─ ACT-004
  │       └─ ACT-005
  └─ FEAT-002
      ...
```

### 8.2 基本原則

**統一フォーマット**:
```
PREFIX-NNN
```

**構成要素**:
1. **PREFIX**: カテゴリを示す識別子（2-4文字の英大文字）
2. **セパレータ**: ハイフン（-）
3. **NNN**: 3桁のゼロパディング付き連番（001-999）

**基本原則**:
- **一貫性**: プロジェクト全体ですべて3桁に統一
- **識別性**: プレフィックスでカテゴリを明確に識別
- **可読性**: ゼロパディングによる整列性の確保
- **拡張性**: 最大999個まで採番可能

---

**改訂履歴**:

| 日付 | バージョン | 変更内容 |
|------|-----------|---------|
| 2025-10-29 | 1.0 | 「用語定義と階層構造.mdc」と「ID採番ルール.mdc」を統合 |
| 2025-10-29 | 1.1 | RQ（要求仕様）とACT（Activity）の定義を追加、5層階層構造に更新、V字モデルをTask→Activityに変更 |
| 2025-10-29 | 1.2 | すべてのID番号を3桁（001-999）に統一 |
| 2025-10-29 | 1.3 | RQをREQに変更（プレフィックスを3文字に統一） |
| 2025-10-29 | 1.4 | Activityを抽象的な活動パターンとして再定義、旧定義はNOTE化 |
| 2025-10-29 | 1.5 | Activityのカテゴリ区切りを廃止、単純な連番管理に変更、Activity一覧.mdc作成 |

alwaysApply: true
---
