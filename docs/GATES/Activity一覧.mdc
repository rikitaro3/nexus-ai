---
title: "Activity一覧"
layer: "QA"
upstream:
  - "docs/GATES/index.mdc"
downstream:
  - "docs/GATES/スクリプトレジストリ.mdc"
  - "docs/GATES/用語定義とID採番ルール.mdc"
tags: ["activity", "workflow", "automation"]
---

# Activity一覧

> Breadcrumbs
> Layer: QA
> Upstream: docs/GATES/index.mdc
> Downstream: docs/GATES/スクリプトレジストリ.mdc, docs/GATES/用語定義とID採番ルール.mdc

## 0. はじめに

このドキュメントは、Nexusプロジェクトで使用する標準化されたActivity（活動パターン）を定義します。
各Activityには、実行を支援するPrompt/Scriptが紐付けられています。

### Activity Type とは

Activity Typeは、開発プロセスにおける再利用可能な活動パターンのテンプレートです。
具体的な作業インスタンス（タスク）ではなく、「どのような活動をするか」の標準的な型を定義します。

**特徴**:
- 再利用可能: 同じパターンを複数の場面で適用可能
- 標準化: 完了基準、入出力、支援ツールが定義済み
- 自動化支援: Prompt/Scriptで実行を効率化

## 1. Activity定義

### ACT-001: 要求分解（REQからFEATへ）

- **目的**: ビジネス要求を実装可能な機能に分解
- **入力**: REQ-XXX（要求仕様）
- **出力**: FEAT-XXX（機能）複数
- **完了基準**:
  - MECEであること（重複なく漏れなく）
  - トレーサビリティが確保されている
  - 各FEATが1〜3ヶ月で実装可能な粒度
  - ビジネス価値が明確
- **支援ツール**:
  - PRM-ACT-001-BD-001: MECE分解プロンプト
  - SCR-ACT-001-VAL-001: 完全性検証スクリプト
  - PRM-ACT-001-RD-001: レビュー支援プロンプト
- **適用例**: REQ-001「ドキュメント駆動開発の実現」→ FEAT-001, FEAT-002, FEAT-003に分解

### ACT-002: 機能分解（FEATからFRへ）

- **目的**: 機能を実装可能な要件に分解
- **入力**: FEAT-XXX（機能）
- **出力**: FR-XXX（機能要件）複数
- **完了基準**:
  - MECEであること
  - 各FRが1〜2週間で実装可能な粒度
  - テスト可能な粒度
  - 実装順序が明確
- **支援ツール**:
  - PRM-ACT-002-BD-001: 機能分解プロンプト
  - SCR-ACT-002-VAL-001: 要件完全性検証
  - PRM-ACT-002-RD-001: 要件レビュープロンプト
- **適用例**: FEAT-001「Docs Navigator」→ FR-001, FR-002, FR-003に分解

### ACT-003: 要件分解（FRからワークアイテムへ）

- **目的**: 要件を具体的な作業に分解
- **入力**: FR-XXX（機能要件）
- **出力**: 具体的な作業リスト（Nexus Tasksで管理）
- **完了基準**:
  - 各作業が1〜3日で完了可能
  - 担当者が明確（または割り当て可能）
  - 作業間の依存関係が明確
  - 各作業の完了基準が定義済み
- **支援ツール**:
  - PRM-ACT-003-BD-001: 作業分解プロンプト
  - SCR-ACT-003-VAL-001: 作業粒度検証
- **適用例**: FR-001「ツリー表示機能」→ 個別の実装タスクに分解

### ACT-004: 設計書作成

- **目的**: 技術設計書の作成
- **入力**: FR-XXX、既存ドキュメント、アーキテクチャ方針
- **出力**: 設計書.mdc
- **完了基準**:
  - DOC-001〜DOC-009のQG合格
  - Breadcrumbs、章番号、目次完備
  - 設計の妥当性が検証済み
  - レビュー完了
- **支援ツール**:
  - PRM-ACT-004-GEN-001: 設計書生成プロンプト
  - SCR-ACT-004-GEN-001: テンプレート生成スクリプト
  - PRM-ACT-004-RD-001: レビュー支援プロンプト
  - SCR-ACT-004-VAL-001: 構造検証スクリプト
- **適用例**: FR-003「Quality Gates機能」の詳細設計書作成

### ACT-005: 仕様書作成

- **目的**: 機能仕様書・画面仕様書の作成
- **入力**: FR-XXX、UX要件、ワイヤーフレーム
- **出力**: 仕様書.mdc
- **完了基準**:
  - DOC-001〜DOC-009のQG合格
  - UI/UXの詳細が明確
  - ユーザーストーリーとの整合性
  - レビュー完了
- **支援ツール**:
  - PRM-ACT-005-GEN-001: 仕様書生成プロンプト
  - SCR-ACT-005-GEN-001: テンプレート生成スクリプト
  - PRM-ACT-005-RD-001: 仕様レビュープロンプト
- **適用例**: 画面仕様書_Nexus.mdcの作成・更新

### ACT-006: API仕様書作成

- **目的**: API仕様の定義とドキュメント化
- **入力**: FR-XXX、データモデル、セキュリティ要件
- **出力**: OpenAPI仕様、API仕様書.mdc
- **完了基準**:
  - OpenAPI形式で定義済み
  - エンドポイント、リクエスト/レスポンス定義完備
  - 認証・認可方式の明記
  - エラーハンドリング定義
- **支援ツール**:
  - PRM-ACT-006-GEN-001: API仕様生成プロンプト
  - SCR-ACT-006-VAL-001: OpenAPI検証スクリプト
- **適用例**: docs/API/openapi.yamlの作成・更新

### ACT-007: テストケース作成

- **目的**: テストケースの設計と文書化
- **入力**: FR-XXX、仕様書、設計書
- **出力**: テストケース.mdc
- **完了基準**:
  - TC-001〜TC-004のQG合格
  - カバレッジが十分（境界値、異常系含む）
  - 自動化の可否が明確
  - 実行手順が明確
- **支援ツール**:
  - PRM-ACT-007-GEN-001: テストケース生成プロンプト
  - SCR-ACT-007-VAL-001: テストケース完全性検証
  - PRM-ACT-007-RD-001: テストレビュープロンプト
- **適用例**: 各機能のテストケース定義

### ACT-008: コンポーネント実装

- **目的**: UIコンポーネント・モジュールの実装
- **入力**: 設計書、仕様書、コーディング規約
- **出力**: ソースコード、単体テスト
- **完了基準**:
  - 仕様通りの動作確認
  - 単体テストのカバレッジ80%以上
  - リンター・フォーマッターのチェック合格
  - コードレビュー完了
- **支援ツール**:
  - PRM-ACT-008-GEN-001: コード生成プロンプト
  - PRM-ACT-008-RD-001: コードレビュープロンプト
  - SCR-ACT-008-VAL-001: コード品質検証
- **適用例**: TreeNode.tsxの実装

### ACT-009: 検証スクリプト実装

- **目的**: Quality Gate検証スクリプトの実装
- **入力**: QG定義、検証項目、期待結果
- **出力**: 検証スクリプト（SCR-XXX-VAL-XXX）
- **完了基準**:
  - QG定義通りの検証項目実装
  - エラーメッセージが明確
  - 実行速度が十分（高速）
  - 誤検知・見逃しがない
- **支援ツール**:
  - PRM-ACT-009-GEN-001: スクリプト生成プロンプト
  - SCR-ACT-009-VAL-001: スクリプト品質検証
  - PRM-ACT-009-RD-001: スクリプトレビュープロンプト
- **適用例**: SCR-DOC-001-VAL-001の実装

### ACT-010: 自動修正スクリプト実装

- **目的**: Quality Gate違反の自動修正スクリプト実装
- **入力**: QG定義、違反パターン、修正ロジック
- **出力**: 修正スクリプト（SCR-XXX-FIX-XXX）
- **完了基準**:
  - 機械的に修正可能な違反を正しく修正
  - 既存の正しい記述を破壊しない
  - 修正結果の妥当性検証
  - ロールバック可能
- **支援ツール**:
  - PRM-ACT-010-GEN-001: 修正スクリプト生成プロンプト
  - SCR-ACT-010-VAL-001: 修正ロジック検証
- **適用例**: SCR-DOC-005-FIX-001（章番号自動付与）の実装

### ACT-011: Quality Gate検証

- **目的**: ドキュメント・コードのQuality Gate検証実行
- **入力**: 検証対象ファイル、QG定義
- **出力**: 検証結果レポート、違反リスト
- **完了基準**:
  - すべてのQG項目が実行済み
  - 違反が0件またはすべて対応済み
  - 検証結果が記録済み
- **支援ツール**:
  - SCR-ACT-011-VAL-001: QG一括実行スクリプト
  - PRM-ACT-011-FIX-001: 違反修正プロンプト生成
- **適用例**: docs配下の全ドキュメントに対するQG検証

### ACT-012: レビュー実施

- **目的**: ドキュメント・コード・設計のレビュー
- **入力**: レビュー対象、レビュー観点
- **出力**: レビュー結果、指摘事項リスト
- **完了基準**:
  - すべての観点がレビュー済み
  - 指摘事項がすべて対応済みまたはトラック済み
  - レビュー結果が記録済み
- **支援ツール**:
  - PRM-ACT-012-RD-001: レビュー観点生成プロンプト
  - PRM-ACT-012-RD-002: レビューコメント生成プロンプト
- **適用例**: PRD、設計書、コードのレビュー

### ACT-013: トレーサビリティ検証

- **目的**: 要求から実装までのトレーサビリティ確認
- **入力**: REQ/FEAT/FR/NFR一覧、実装状況
- **出力**: トレーサビリティマトリクス、欠損リスト
- **完了基準**:
  - すべてのREQがFEATに紐付いている
  - すべてのFEATがFRに紐付いている
  - 孤立した要求・実装がない
  - DAGに循環参照がない
- **支援ツール**:
  - SCR-ACT-013-VAL-001: トレーサビリティ検証スクリプト
  - PRM-ACT-013-FIX-001: 欠損修正プロンプト
- **適用例**: プロジェクト全体のトレーサビリティ監査

### ACT-014: プロンプトテンプレート作成

- **目的**: 再利用可能なプロンプトテンプレートの作成
- **入力**: Activity定義、期待する出力、制約条件
- **出力**: prompts.jsonへの登録
- **完了基準**:
  - プロンプトIDが採番済み
  - 入力・出力が明確
  - 複数回実行で安定した結果
  - ドキュメント化済み
- **支援ツール**:
  - PRM-ACT-014-GEN-001: プロンプト生成プロンプト（メタ）
  - SCR-ACT-014-VAL-001: プロンプト品質検証
- **適用例**: PRM-ACT-004-GEN-001の作成

## 2. 付録

### 2.1 Activityマトリクス

| Activity ID | 名称 | 種別（参考） | 入力 | 出力 | 関連QG | 支援Prompt数 | 支援Script数 |
|------------|------|-------------|------|------|--------|-------------|-------------|
| ACT-001 | REQ→FEAT分解 | 要求分解 | REQ | FEAT | - | 2 | 1 |
| ACT-002 | FEAT→FR分解 | 要求分解 | FEAT | FR | - | 2 | 1 |
| ACT-003 | FR→作業分解 | 要求分解 | FR | タスク | - | 1 | 1 |
| ACT-004 | 設計書作成 | ドキュメント | FR | .mdc | DOC-001〜009 | 3 | 2 |
| ACT-005 | 仕様書作成 | ドキュメント | FR | .mdc | DOC-001〜009 | 3 | 1 |
| ACT-006 | API仕様作成 | ドキュメント | FR | .yaml/.mdc | - | 1 | 1 |
| ACT-007 | テストケース作成 | ドキュメント | FR | .mdc | TC-001〜004 | 3 | 1 |
| ACT-008 | コンポーネント実装 | 実装 | 設計書 | .ts/.tsx | CODE-XXX | 2 | 1 |
| ACT-009 | 検証スクリプト実装 | 実装 | QG定義 | SCR-XXX-VAL | - | 3 | 1 |
| ACT-010 | 修正スクリプト実装 | 実装 | QG定義 | SCR-XXX-FIX | - | 2 | 1 |
| ACT-011 | Quality Gate検証 | 検証 | ファイル | レポート | ALL | 1 | 1 |
| ACT-012 | レビュー実施 | 検証 | 成果物 | レビュー結果 | - | 2 | 0 |
| ACT-013 | トレーサビリティ検証 | 検証 | 全要求 | マトリクス | - | 1 | 1 |
| ACT-014 | プロンプト作成 | プロンプト | Activity定義 | PRM-XXX | - | 1 | 1 |

### 2.2 Activity適用フロー

```
REQ-001 (要求仕様)
  ↓ ACT-001適用
FEAT-001, FEAT-002, FEAT-003 (機能)
  ↓ ACT-002適用
FR-001, FR-002, ... (機能要件)
  ↓ ACT-004適用
設計書.mdc
  ↓ ACT-007適用
テストケース.mdc
  ↓ ACT-003適用
具体的作業タスク (Nexus Tasksで管理)
  ↓ ACT-008適用
実装コード
  ↓ ACT-011適用
Quality Gate検証 → 合格
  ↓ ACT-012適用
レビュー → 承認
```

### 2.3 Activity追加ガイドライン

新しいActivityパターンを追加する際の手順：

1. **Activity ID採番**: 最新番号+1で連番採番
   - 定義順に001, 002, 003...と採番
   - カテゴリによる番号区切りなし
   - 3桁ゼロパディング必須

2. **Activity定義**: 以下の項目を明確化
   - 目的
   - 入力/出力
   - 完了基準
   - 支援ツール

3. **支援ツール実装**: 
   - Prompt: PRM-ACT-XXX-[BD|GEN|RD|VAL|FIX]-001
   - Script: SCR-ACT-XXX-[BD|GEN|RD|VAL|FIX]-001
   
   **カテゴリ説明**:
   - BD: Breakdown（分解）
   - GEN: Generate（生成）
   - RD: Review（レビュー）
   - VAL: Validation（検証）
   - FIX: Fix（修正）

4. **ドキュメント登録**:
   - 本ドキュメント（Activity一覧.mdc）に追加
   - スクリプトレジストリ.mdcに登録
   - prompts.jsonに登録

5. **検証**: 
   - 実際に適用してみる
   - 完了基準が達成可能か確認
   - 支援ツールが有効か確認

---

alwaysApply: true
