---
title: "ID採番ルール（ID Numbering Rules）"
layer: "QA"
template: "legacy-import"
upstream:
  - "docs/GATES/index.mdc"
downstream: []
tags: ["quality-gates", "governance", "best-practices"]
---

# ID採番ルール（ID Numbering Rules）

> Breadcrumbs
> Layer: QA
> Upstream: docs/GATES/index.mdc
> Downstream: N/A

## 1. 概要と目的

### 1.1 ID管理の意義

ソフトウェア開発プロジェクトにおいて、要件・機能・テストケース・品質ゲートなどの成果物に一意な識別子（ID）を付与することは、以下の目的で不可欠です：

- **トレーサビリティの確保**: 要件から設計、実装、テストまでの追跡可能性を実現
- **変更管理の効率化**: 影響範囲の特定と変更履歴の管理
- **コミュニケーションの明確化**: チーム内での参照が容易になり、誤解を防止
- **ドキュメント横断検索**: 複数ドキュメントにまたがる情報の統合表示
- **品質保証**: 網羅性の確認と抜け漏れの検出

### 1.2 本ドキュメントの目的

本ドキュメントは、プロジェクト横断で適用可能な汎用的なID採番ルールを定義し、以下を提供します：

- ID形式の標準化された設計原則
- 採番フローと管理方法のベストプラクティス
- 具体的な適用例（Nexusプロジェクトでの実装）
- 他プロジェクトへの適用ガイドライン

## 2. 汎用的な採番原則

### 2.1 基本原則

ID採番ルールは、以下の5つの原則に基づいて設計します：

#### 原則1: 一貫性の維持

- プロジェクト全体で統一されたルールを適用
- 同一カテゴリ内では同一の形式を使用
- 例外ルールは最小限に抑える

#### 原則2: 識別性の確保

- 各IDは一意であり、重複しない
- プレフィックスでカテゴリを明確に識別
- IDを見ただけで、それが何を指すか推測可能

#### 原則3: 拡張性の考慮

- 将来的な成果物の増加に対応できる桁数設計
- 新しいカテゴリの追加が容易な構造
- 欠番が発生しても運用可能なルール

#### 原則4: 可読性の重視

- 人間が理解しやすい形式
- ゼロパディングによる整列性の確保
- セパレータによる視認性の向上

#### 原則5: 保守性の確保

- ID台帳（レジストリ）での一元管理
- 採番ルールの文書化と共有
- 自動化ツールによる支援の検討

### 2.2 アンチパターン

以下のような採番は避けるべきです：

- **ランダムな番号**: 順序性がなく、管理が困難
- **日付のみの採番**: 同日に複数作成した場合に衝突
- **意味を持たせすぎる**: 変更時に番号の付け直しが必要になる
- **桁数の不統一**: ソートや検索が困難になる
- **プレフィックスなし**: カテゴリの識別ができない

## 3. ID形式の基本構造

### 3.1 推奨フォーマット

```
PREFIX-NNNN
```

または

```
PREFIX-NN
```

**構成要素**:

1. **PREFIX**: カテゴリを示す識別子（2-5文字の英大文字）
2. **セパレータ**: ハイフン（-）を推奨
3. **NNNN**: ゼロパディング付き連番（桁数は用途に応じて2-4桁）

### 3.2 プレフィックス（PREFIX）

#### 設計ガイドライン

- **長さ**: 2-5文字を推奨（短すぎると衝突、長すぎると冗長）
- **文字種**: 英大文字のみ（A-Z）
- **命名**: カテゴリを明確に表す略語を使用
- **予約語**: 一般的な略語（REQ, FEAT, TEST等）は標準的な意味で使用

#### よく使われるプレフィックス例

| プレフィックス | 用途 | 例 |
|--------------|------|-----|
| REQ | 要件（Requirements） | REQ-0001 |
| FEAT | 機能（Features） | FEAT-0001 |
| FR | 機能要件（Functional Requirements） | FR-01 |
| NFR | 非機能要件（Non-Functional Requirements） | NFR-01 |
| US | ユーザーストーリー（User Stories） | US-0001 |
| EPIC | エピック | EPIC-0001 |
| BUG | バグ | BUG-0001 |
| TC | テストケース（Test Cases） | TC-0001 |
| TS | テストシナリオ（Test Scenarios） | TS-0001 |
| DOC | ドキュメント・品質ゲート | DOC-01 |
| GATE | 品質ゲート（Quality Gates） | GATE-01 |
| TASK | タスク | TASK-0001 |
| ISSUE | 課題 | ISSUE-0001 |

### 3.3 数値部分（NNNN）

#### 桁数の決定基準

- **2桁（01-99）**: 小規模カテゴリ（~100項目）
  - 例: 品質ゲート、レイヤー定義
- **3桁（001-999）**: 中規模カテゴリ（~1000項目）
  - 例: ユーザーストーリー、エピック
- **4桁（0001-9999）**: 大規模カテゴリ（~10000項目）
  - 例: 詳細機能、テストケース、バグ

#### ゼロパディング

- 常にゼロパディングを使用
- ファイルシステムやデータベースでの整列を保証
- 例: `FEAT-0001`, `FEAT-0099`, `FEAT-0100`

#### 開始番号

- **推奨**: `0001`（または`01`）から開始
- **理由**: `0000`は特別な意味を持たせることが多いため避ける

### 3.4 セパレータ

- **推奨**: ハイフン（-）
- **理由**:
  - 視認性が高い
  - URL、ファイル名、コマンドライン引数で使用可能
  - 多くのプログラミング言語で識別子として扱える
- **非推奨**: アンダースコア（_）やスペース

### 3.5 オプション要素

必要に応じて以下を追加可能：

#### バージョン情報

```
DOC-01-v1.0
DOC-01-v2.0
```

#### サブカテゴリ

```
FEAT-UI-0001
FEAT-API-0001
```

ただし、複雑化を避けるため、必要最小限に留めることを推奨します。

## 4. 採番フロー

### 4.1 新規ID発行の手順

1. **カテゴリの確認**: 対象がどのカテゴリに属するか決定
2. **最新番号の確認**: ID台帳または既存ドキュメントから最新番号を取得
3. **インクリメント**: 最新番号+1を新規IDとして採番
4. **重複チェック**: grepやcodebase searchで重複がないか確認
5. **登録**: ID台帳に登録し、ドキュメントに記載

### 4.2 ID台帳の確認方法

#### grepコマンドでの検索

```bash
# 特定プレフィックスの全IDを検索
grep -r "FEAT-[0-9]\{4\}" docs/

# 最新番号を確認
grep -r "FEAT-[0-9]\{4\}" docs/ | sort | tail -n 10
```

#### codebase searchでの検索

Cursor等のIDEで横断検索機能を使用：

```
検索: FEAT-\d{4}
```

#### ID台帳ファイル

プロジェクトによっては、ID台帳を専用ファイルで管理：

- `docs/PRD/index.mdc` の "Features Registry"
- `docs/GATES/index.mdc` の "Quality Gates一覧"
- 専用の `ID_REGISTRY.md`

### 4.3 欠番の扱い

#### 基本方針: 欠番は埋めない

- **理由**:
  - 削除された項目の履歴を残せる
  - 採番ミスや意図的な削除を追跡可能
  - 欠番を埋める運用は複雑化を招く

#### 例外: 採番直後の誤り

採番直後（数分以内）でコミット前の場合のみ、番号の付け直しを許容。

#### 廃止IDの管理

廃止したIDは台帳に記録：

```markdown
| FEAT-0005 | (廃止) 旧機能X | - | - | 2025-01-15廃止 |
```

### 4.4 重複チェックと防止策

#### チェック方法

1. **手動検索**: grep/codebase searchで全文検索
2. **レビュー**: プルリクエストでID台帳の変更を確認
3. **自動化**: CIで重複チェックスクリプトを実行（推奨）

#### 重複防止策

- ID台帳を単一ファイル（Single Source of Truth）で管理
- 採番時に必ず台帳を参照する習慣化
- 複数人で同時採番を避ける（プルリクエスト単位で調整）

## 5. プレフィックス設計ガイド

### 5.1 プロジェクト固有プレフィックスの定義

#### ステップ1: カテゴリの洗い出し

プロジェクトで管理する成果物のカテゴリを列挙：

- 要件文書（機能要件、非機能要件）
- 設計文書（アーキテクチャ、API、データ）
- テスト関連（テストケース、バグ）
- 品質管理（品質ゲート、チェックリスト）

#### ステップ2: プレフィックス候補の作成

各カテゴリに対して、2-5文字の略語を考案：

- 英語での一般的な略語を優先
- 既存の業界標準があれば踏襲
- 社内用語がある場合は考慮

#### ステップ3: 衝突チェック

- 既存のプレフィックスとの重複確認
- 類似プレフィックスの有無確認（FEAT vs FET）
- 将来追加予定のカテゴリとの衝突可能性

#### ステップ4: ドキュメント化

プレフィックス一覧を文書化し、チームで共有：

```markdown
## プロジェクトXのID体系

| プレフィックス | カテゴリ | 桁数 | 例 |
|--------------|---------|------|-----|
| FEAT | 機能 | 4 | FEAT-0001 |
| FR | 機能要件 | 2 | FR-01 |
| TC | テストケース | 4 | TC-0001 |
```

### 5.2 命名のベストプラクティス

- **略語の明確性**: 誰が見ても理解できる略語
- **一貫性**: 同類のカテゴリは類似の命名規則
- **英語使用**: 国際化を考慮し英語を基本とする
- **略さない選択肢**: 4-5文字なら略さず記述も検討（例: TEST, ISSUE）

## 6. 管理とガバナンス

### 6.1 ID台帳の管理場所

#### パターン1: インデックスファイルでの管理

各レイヤーのindex.mdcに集約：

```markdown
## Features Registry

| FEAT-ID | 機能名 | 説明 | ステータス |
|---------|--------|------|-----------|
| FEAT-0001 | 機能A | ... | 実装済み |
| FEAT-0002 | 機能B | ... | 計画中 |
```

**メリット**:
- ドキュメント構造と一体化
- 既存のドキュメントフローに統合

#### パターン2: 専用台帳ファイル

プロジェクトルートに配置：

```
ID_REGISTRY.md
```

**メリット**:
- 全IDを一元管理
- 横断検索が容易

#### パターン3: データベース管理

課題管理システム（Jira、GitHub Issues等）で管理。

**メリット**:
- ワークフロー統合
- 自動化が容易

### 6.2 レビュー基準

#### プルリクエストでの確認事項

- [ ] 新規IDが台帳に登録されているか
- [ ] ID形式がルールに準拠しているか
- [ ] 重複IDが存在しないか
- [ ] 関連ドキュメントにIDが記載されているか
- [ ] 廃止IDの場合、台帳に廃止理由が記録されているか

### 6.3 自動化の検討

#### スクリプトによる採番支援

```javascript
// 例: 次のFEAT-IDを自動生成
function getNextFeatId() {
  const existingIds = findAllFeatIds('docs/');
  const maxNumber = Math.max(...existingIds.map(id => 
    parseInt(id.replace('FEAT-', ''))
  ));
  return `FEAT-${String(maxNumber + 1).padStart(4, '0')}`;
}
```

#### CI/CDでの検証

```yaml
# GitHub Actions例
- name: Validate ID Registry
  run: |
    node scripts/validate-id-registry.js
```

### 6.4 Quality Gatesとの連携

ID採番ルールも品質基準の一部として定義：

```yaml
gates:
  - id: ID-01
    name: "ID形式準拠"
    description: "全IDが定義されたフォーマットに準拠している"
    severity: error
    
  - id: ID-02
    name: "ID重複なし"
    description: "同一IDが複数箇所に存在しない"
    severity: error
    
  - id: ID-03
    name: "ID台帳登録"
    description: "全IDが台帳に登録されている"
    severity: warning
```

## 7. Nexus適用例

### 7.1 現在のID体系

Nexusプロジェクトでは、以下のIDプレフィックスを使用しています：

| プレフィックス | カテゴリ | 桁数 | 用途 | 例 |
|--------------|---------|------|------|-----|
| FEAT | 機能ID | 4 | プロジェクト全体の機能識別 | FEAT-0001 |
| FR | 機能要件ID | 2 | 要求仕様書の機能要件 | FR-01 |
| NFR | 非機能要件ID | 2 | 要求仕様書の非機能要件 | NFR-01 |
| DOC | 品質ゲートID | 2 | ドキュメント品質ゲート | DOC-01 |
| TC | テストケースID | 4 | テストケース識別子 | TC-0001 |

### 7.2 Features Registry（FEAT-ID）

**管理場所**: `docs/PRD/index.mdc`

FEAT-IDは、Nexusの機能を横断的に識別するIDです：

```markdown
## Features Registry

| FEAT-ID | 機能名 | 説明 | 優先度 | ステータス |
|---------|--------|------|--------|-----------|
| FEAT-0001 | Docs Navigator | ドキュメント閲覧 | High | 実装中 |
| FEAT-0002 | Tasks | タスク管理 | High | 実装中 |
| FEAT-0009 | 詳細カード | 共通コンポーネント | High | 実装済み |
| FEAT-0024 | Nexus最小MVP | MVP機能群 | High | 実装済み |
| FEAT-0025 | コンテキスト切替 | デバッグモード | Medium | 実装済み |
| FEAT-0026 | 戦略・ビジョン実装 | 長期実装 | Low | 計画中 |
```

**採番ルール**:
- 0001から開始
- 4桁ゼロパディング
- 欠番は埋めない

### 7.3 機能要件ID（FR-ID）

**管理場所**: `docs/PRD/要求仕様書.mdc`

機能要件を識別するIDです：

```markdown
| FR-ID | 要件名 | FEAT-ID |
|-------|--------|---------|
| FR-01 | Docs Navigator | FEAT-0001 |
| FR-02 | Tasks | FEAT-0002 |
| FR-15 | プロンプト生成 | FEAT-0015 |
```

### 7.4 品質ゲートID（DOC-ID）

**管理場所**: `docs/GATES/document.mdc`、`docs/GATES/index.mdc`

ドキュメント品質ゲートを識別：

```markdown
- DOC-01: Breadcrumbs必須
- DOC-02: Layer定義準拠
- DOC-03: リンクパス存在確認
```

### 7.5 テストケースID（TC-ID）

**管理場所**: `docs/QA/テストケース管理設計.mdc`（想定）

テストケースを識別：

```markdown
| TC-ID | テストケース名 | FEAT-ID |
|-------|---------------|---------|
| TC-0001 | ドキュメント読み込み | FEAT-0001 |
| TC-0002 | タスクインポート | FEAT-0002 |
```

### 7.6 廃止されたID体系

#### NEX-ID（廃止）

**廃止理由**: Nexus固有の識別子で、他プロジェクトに適用できないため。

**移行方針**: NEX-IDはFEAT-IDに統合。

| 旧NEX-ID | 新FEAT-ID | 機能名 |
|---------|----------|--------|
| NEX-0001 | FEAT-0024 | Nexus最小MVP |
| NEX-0002 | FEAT-0025 | コンテキスト切替 |
| NEX-0003 | FEAT-0026 | 戦略・ビジョン実装 |

## 8. 他プロジェクトへの適用

### 8.1 適用手順

#### ステップ1: 現状分析

- 現在の識別子管理方法を確認
- 管理対象のカテゴリを洗い出し
- 想定される項目数を見積もり

#### ステップ2: ID体系の設計

- プレフィックスを定義（セクション5参照）
- 桁数を決定（セクション3.3参照）
- ID台帳の管理方法を決定（セクション6.1参照）

#### ステップ3: ドキュメント化

- プロジェクト固有のID採番ルールを文書化
- 本ドキュメントを参照し、必要な箇所をカスタマイズ
- チームで共有し、合意形成

#### ステップ4: 段階的導入

1. **Phase 1**: 新規項目から適用開始
2. **Phase 2**: 既存項目への段階的な適用
3. **Phase 3**: 自動化ツールの整備

### 8.2 カスタマイズポイント

#### プレフィックスのカスタマイズ

プロジェクトの性質に応じて調整：

**例: モバイルアプリプロジェクト**

```markdown
| PREFIX | カテゴリ | 例 |
|--------|---------|-----|
| SCREEN | 画面 | SCREEN-0001 |
| API | APIエンドポイント | API-0001 |
| UICOMP | UIコンポーネント | UICOMP-0001 |
```

**例: データ分析プロジェクト**

```markdown
| PREFIX | カテゴリ | 例 |
|--------|---------|-----|
| DS | データソース | DS-001 |
| MODEL | 分析モデル | MODEL-001 |
| METRIC | 指標 | METRIC-001 |
```

#### 桁数の調整

プロジェクトスコープに応じて：

- **小規模**: 2桁で十分
- **中規模**: 3桁を基本
- **大規模**: 4桁以上を検討

#### 階層構造の設計

複雑なプロジェクトでは階層化を検討：

```
EPIC-001
  └── FEAT-0001
  └── FEAT-0002
       └── TASK-0001
       └── TASK-0002
```

### 8.3 既存プロジェクトへの導入

#### 段階的移行戦略

1. **現状維持期間**: 既存IDはそのまま
2. **並行運用期間**: 新規項目のみ新ルール適用
3. **完全移行期間**: 旧IDを新IDに置き換え（オプション）

#### 移行時の注意点

- 旧IDとのマッピング表を作成
- ドキュメント内の参照を一括置換（慎重に）
- 外部システム連携がある場合は影響範囲を確認

## 9. まとめ

### 9.1 重要ポイント

1. **一貫性**: 統一されたルールを全体に適用
2. **識別性**: プレフィックスとゼロパディングで明確化
3. **拡張性**: 将来の成長を見越した桁数設計
4. **可読性**: 人間が理解しやすい形式
5. **保守性**: ID台帳での一元管理

### 9.2 推奨フォーマット

```
PREFIX-NNNN
```

- PREFIX: 2-5文字の英大文字
- セパレータ: ハイフン（-）
- NNNN: 2-4桁のゼロパディング付き連番

### 9.3 採番フロー

1. カテゴリ確認
2. 最新番号確認
3. インクリメント
4. 重複チェック
5. 台帳登録

### 9.4 次のステップ

1. プロジェクトのID体系を設計
2. ID台帳を作成
3. チームで合意形成
4. 新規項目から適用開始
5. 自動化ツールを整備（オプション）

## 10. 参考資料

### 10.1 関連ドキュメント

- `docs/GATES/index.mdc`: Quality Gates定義
- `docs/PRD/index.mdc`: Features Registry（Nexus適用例）
- `docs/QA/テストケース管理設計.mdc`: テストケースID管理

### 10.2 外部リソース

- ISO/IEC/IEEE 29148: 要件エンジニアリング標準
- Semantic Versioning 2.0.0: バージョニング規約
- GitHub Issue Numbering: 課題管理システムでの採番例

---

**改訂履歴**:

| 日付 | バージョン | 変更内容 |
|------|-----------|---------|
| 2025-10-29 | 1.0 | 初版作成（NEX-ID廃止、FEAT-IDに統合） |
